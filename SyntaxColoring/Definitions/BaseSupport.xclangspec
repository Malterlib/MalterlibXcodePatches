(
    // Mark: URLs
	{
		Identifier = "xcode.lang.url";
		Syntax = {
			StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
			CaseSensitive = NO;
			Match = (
				"^(acap|adir|afp|afs|callto|cap|cid|cvs|data|doi|facetime|fax|feed|file|ftp|git|go|gopher|gtalk|https|http|imap|info|jabber|jdbc|ldaps|ldap|mailserver|message|mid|modem|news|nntp|odbc|opaquelocktoken|pop|prospero|rdar|rtsp|rsync|service|sftp|sips|sip|skype|snews|snmp|soap\\.beep|soap\\.beeps|ssh|svn|tag|telnet|tel|tip|tn3270|urn|vemmi|vnc|wais|webcal|xcdoc|z39\\.50r|z39\\.50s)://([\\p{Letter}\\p{Number}\\-_.]+/)?[\\p{Letter}\\p{Number};/?:@\\&=+$,\\-_.!~*'()%#]+",
				"^(mailto|im):[\\p{Letter}\\p{Number}\\-_]+@[\\p{Letter}\\p{Number}\\-_\\.!%]+",
				"^radar:[\\p{Letter}\\p{Number};/?:@\\&=+$,\\-_.!~*'()%#]+",
			);
			Type = "xcode.syntax.url";
		};
	},
	{
		Identifier = "xcode.lang.url.mail";
		Syntax = {
			StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
			CaseSensitive = NO;
			Match = (
				"^[\\p{Letter}\\p{Number}\\-_\\.]+@[\\p{Letter}\\p{Number}\\-_\\.!%]+",
			);
			Type = "xcode.syntax.url.mail";
		};
	},

    // Mark: - String literals
	{
		Identifier = "xcode.lang.string";
		Syntax = {
			Start = "\"";
			EscapeChar = "\\";
			End = "\"|\n";
			Type = "xcode.syntax.string";
		};
	},
    {
        Identifier = "xcode.lang.string.multiline";
        Syntax = {
            Start = "\"";
            EscapeChar = "\\";
            End = "\"";
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.string.wide";
        Syntax = {
            Start = "L\"";
            EscapeChar = "\\";
            End = "\"|\n";
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.string.utf8";
        Syntax = {
            Start = "u8\"";
            EscapeChar = "\\";
            End = "\"|\n";
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.string.ucs2";
        Syntax = {
            Start = "u\"";
            EscapeChar = "\\";
            End = "\"|\n";
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.string.ucs4";
        Syntax = {
            Start = "U\"";
            EscapeChar = "\\";
            End = "\"|\n";
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.string.singlequote";
        BasedOn = "xcode.lang.string";
        Syntax = {
            Start = "'";
            EscapeChar = "\\";
            End = "'|\n";
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.string.backquote";
        BasedOn = "xcode.lang.string";
        Syntax = {
            Start = "`";
            EscapeChar = "\\";
            End = "`|\n";
            Type = "xcode.syntax.string";
        };
    },

    // Mark: - Character literals
    {
        Identifier = "xcode.lang.character";
        Syntax = {
            Start = "'";
            EscapeChar = "\\";
            End = "'|\n";
            Type = "xcode.syntax.character";
        };
    },
    {
        Identifier = "xcode.lang.character.wide";
        Syntax = {
            Start = "L'";
            EscapeChar = "\\";
            End = "'|\n";
            Type = "xcode.syntax.character";
        };
    },
    {
        Identifier = "xcode.lang.character.utf8";
        Syntax = {
            Start = "u8'";
            EscapeChar = "\\";
            End = "'|\n";
            Type = "xcode.syntax.character";
        };
    },
    {
        Identifier = "xcode.lang.character.ucs2";
        Syntax = {
            Start = "u'";
            EscapeChar = "\\";
            End = "'|\n";
            Type = "xcode.syntax.character";
        };
    },
    {
        Identifier = "xcode.lang.character.ucs4";
        Syntax = {
            Start = "U'";
            EscapeChar = "\\";
            End = "'|\n";
            Type = "xcode.syntax.character";
        };
    },

	{
		Identifier = "xcode.lang.completionplaceholder";
		Syntax = {
			Start = "<#";
			End = "#>";
			Type = "xcode.syntax.completionplaceholder";
		};
	},

    // Mark: - Comments
	{
		Identifier = "xcode.lang.comment";
		Syntax = {
			Start = "/*";
			End = "*/";
			ParseEndBeforeIncludedRules = YES;
			Foldable = YES;
			IncludeRules = (
				"xcode.lang.url",
				"xcode.lang.url.mail",
				"xcode.lang.comment.mark",
			);
			Type = "xcode.syntax.comment";
		};
	},
	{
		Identifier = "xcode.lang.comment.recursive";
		Syntax = {
			Start = "/*";
			End = "*/";
			Foldable = YES;
            Recursive = YES;
			IncludeRules = (
				"xcode.lang.url",
				"xcode.lang.url.mail",
				"xcode.lang.comment.mark",
			);
			Type = "xcode.syntax.comment";
		};
	},
	{
		Identifier = "xcode.lang.comment.singleline";
		BasedOn = "xcode.lang.comment";
		Syntax = {
			Start = "//";
			EscapeChar = "\\";
			Until = "\n";
			IncludeRules = (
				"xcode.lang.url",
				"xcode.lang.url.mail",
				"xcode.lang.comment.mark",
			);
			Type = "xcode.syntax.comment";
		};
	},
	{
		Identifier = "xcode.lang.comment.singleline.pound";
		BasedOn = "xcode.lang.comment";
		Syntax = {
			Start = "#";
			EscapeChar = "\\";
			Until = "\n";
			IncludeRules = (
				"xcode.lang.url",
				"xcode.lang.url.mail",
				"xcode.lang.comment.mark",
			);
			Type = "xcode.syntax.comment";
		};
	},
	{
		Identifier = "xcode.lang.comment.mark";
		Syntax = {
            CaseSensitive = NO;
			StartChars = "MTF!?";
			Match = (
				"^MARK:[ \t]+(.*)$",
				"^(TODO:[ \t]+.*)$",
				"^(FIXME:[ \t]+.*)$",
				"^(!!!:.*)$",
				"^(\\?\\?\\?:.*)$",
			);
			CaptureTypes = (
				"xcode.syntax.mark",
			);
			Type = "xcode.syntax.comment";
		};
	},
	{
		Identifier = "xcode.lang.number";
		Syntax = {
			SourceScannerClassName = NumberScanner;
			StartChars = "+-0123456789.";
			Chars = "0123456789+-.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
			Match = (
				"^[+-]?0[bB][01]+([lLuU])*",
				"^[+-]?0[xX][0-9a-fA-F]+((\\.[0-9a-fA-F]*)?([pP][+-]?[0-9]+)?)?([lLfFuU])*",
				"^[+-]?0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+)?([lLfFuU])*",
				"^[+-]?[0-9]+((\\.[0-9]*)?([eE][+-]?[0-9]+)?)?([lLfFuU])*",
				"^[+-]?[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?([lLfFuU])*",
			);
			Type = "xcode.syntax.number";
		};
	},

    // Mark: - Indentation and specially generate tokens
    //   Used by Python, YAML and Doc comment parsing.
    {
        Identifier = "xcode.lang.generated.indent";
        Syntax = {
            Type = "xcode.syntax.plain";
        };
    },
    {   // if "Indent = n" is specified, then we generate this token when indentation is greater than or equal to n. (Otherwise we generate the plain indent token.)
        Identifier = "xcode.lang.generated.fullindent";
        Syntax = {
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.generated.dedent";
        Syntax = {
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.generated.emptyline";
        Syntax = {
            Type = "xcode.syntax.plain";
        };
    },

    // Mark: - Preprocessor macros we want to ignore
    {
        Identifier = "xcode.lang.generated.preprocessor.ignore";
        Syntax = {
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.generated.preprocessor.function.ignore";
        Syntax = {
            Type = "xcode.syntax.plain";
        };
    },

    // Mark: - Plain (no) coloring
	{
		Identifier = "xcode.lang.plainColoring";
		Description = "Xcode Plain Coloring";
		IncludeInMenu = YES;
		Name = "Plain Coloring";
		Syntax = {
			Type = "xcode.syntax.plain";
		};
	},

    // Mark: - Simple coloring
	{
		Identifier = "xcode.lang.simpleColoring";
		Description = "Xcode Simple Coloring";
		IncludeInMenu = YES;
		Name = "Simple Coloring";
		Syntax = {
			IncludeRules = (
				"xcode.lang.comment",
				"xcode.lang.comment.singleline",
				"xcode.lang.comment.singleline.pound",
				"xcode.lang.string",
				"xcode.lang.character",
				"xcode.lang.number",
				"xcode.lang.simpleColoring.block",
			);
			Type = "xcode.syntax.plain";
		};
	},
	{
		Identifier = "xcode.lang.simpleColoring.block";
		Syntax = {
			Start = "{";
			End = "}";
			Foldable = YES;
			Recursive = YES;
			IncludeRules = (
				"xcode.lang.comment",
				"xcode.lang.comment.singleline",
				"xcode.lang.comment.singleline.pound",
				"xcode.lang.string",
				"xcode.lang.character",
				"xcode.lang.number",
			);
		};
	},
)
