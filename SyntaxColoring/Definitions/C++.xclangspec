// C++
(

/****************************************************************************/
// MARK: C++ keywords
/****************************************************************************/

    {
        Identifier = "xcode.lang.cpp.identifier";
        Syntax = {
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            CheckPreprocessorKnownMacros = YES;
            IncludeRules = (
                "xcode.lang.malterlib.variable.explicit",
                "xcode.lang.malterlib.keyword.builtinconstant",
                "xcode.lang.malterlib.constant",
                "xcode.lang.malterlib.constant.private",
                "xcode.lang.malterlib.namespace",
                "xcode.lang.malterlib.namespace.explicit",
                "xcode.lang.malterlib.templatetypeparam",
                "xcode.lang.malterlib.functiontemplatetypeparam",
                "xcode.lang.malterlib.constant.template",
                "xcode.lang.malterlib.constant.templatefunction",
                "xcode.lang.malterlib.type",
                "xcode.lang.malterlib.type.explicit",
                "xcode.lang.malterlib.functor.param",
                "xcode.lang.malterlib.functor.param.output",
                "xcode.lang.malterlib.functor.member",
                "xcode.lang.malterlib.functor.member.private",
                "xcode.lang.malterlib.member",
                "xcode.lang.malterlib.member.private",
                "xcode.lang.malterlib.function",
                "xcode.lang.malterlib.function.explicit",
                "xcode.lang.malterlib.function.private",
                "xcode.lang.malterlib.function.global",
                "xcode.lang.malterlib.function.global.explicit",
                "xcode.lang.malterlib.macro",
                "xcode.lang.malterlib.macro.explicit",
                "xcode.lang.malterlib.macro.parameter",
                "xcode.lang.malterlib.function.parameter",
                "xcode.lang.malterlib.function.parameter.output",
                "xcode.lang.malterlib.member.static",
                "xcode.lang.malterlib.member.static.private",
                "xcode.lang.malterlib.global",
                "xcode.lang.malterlib.functor.local",
                "xcode.lang.malterlib.keyword.qualifiers",
                "xcode.lang.malterlib.keyword.storageclass",
                "xcode.lang.malterlib.keyword.builtintype",
                "xcode.lang.malterlib.keyword.builtincharactertype",
                "xcode.lang.malterlib.keyword.builtinintegertype",
                "xcode.lang.malterlib.keyword.builtintypemodifier",
                "xcode.lang.malterlib.keyword.builtinvectortype",
                "xcode.lang.malterlib.keyword.builtinfloattype",
                "xcode.lang.malterlib.keyword.exceptionhandling",
                "xcode.lang.malterlib.keyword.introspection",
                "xcode.lang.malterlib.keyword.staticassert",
                "xcode.lang.malterlib.keyword.controlstatement",
                "xcode.lang.malterlib.keyword.optimization",
                "xcode.lang.malterlib.keyword.propertymodifier",
                "xcode.lang.malterlib.keyword.newdelete",
                "xcode.lang.malterlib.keyword.clr",
                "xcode.lang.malterlib.keyword.other",
                "xcode.lang.malterlib.keyword.typespecification",
                "xcode.lang.malterlib.keyword.namespace",
                "xcode.lang.malterlib.keyword.typename",
                "xcode.lang.malterlib.keyword.template",
                "xcode.lang.malterlib.keyword.typedef",
                "xcode.lang.malterlib.keyword.using",
                "xcode.lang.malterlib.keyword.auto",
                "xcode.lang.malterlib.keyword.js.var",
                "xcode.lang.malterlib.keyword.this",
                "xcode.lang.malterlib.keyword.operator",
                "xcode.lang.malterlib.keyword.access",
                "xcode.lang.malterlib.keyword.virtual",
                "xcode.lang.malterlib.keyword.casts",
                "xcode.lang.malterlib.keyword.ignore",
                "xcode.lang.malterlib.keyword.preprocessordirective",
                "xcode.lang.malterlib.variable",
            );
            Words = (
                // Keywords from C
                "__alignof__",
                "__asm__",
                "__attribute__",
                "__complex__",
                "__extension__",
                "__imag__",
                "__label__",
                "__nonnull",
                "__nullable",
                "__null_unspecified",
                "__real__",
                "__restrict",
                "__restrict__",
                "__typeof__",
                "_Bool",
                "_Complex",
                "_Imaginary",
                "_Nonnull",
                "_Nullable",
                "_Null_unspecified",
                "__block",
                "asm",
                "auto",
                "bool",
                "break",
                "case",
                "char",
                "co_return",
                "co_await",
                "co_yield",
                "const",
                "continue",
                "default",
                "do",
                "double",
                "else",
                "enum",
                "extern",
                "false",
                "float",
                "for",
                "goto",
                "if",
                "inline",
                "int",
                "long",
                "register",
                "restrict",
                "return",
                "short",
                "signed",
                "sizeof",
                "static",
                "struct",
                "switch",
                "true",
                "typedef",
                "typeof",
                "union",
                "unsigned",
                "void",
                "volatile",
                "while",
                "FALSE",
                "NULL",
                "TRUE",

                // Keywords from C++
                "__private_extern__",
                "and",
                "and_eq",
                "bitand",
                "bitor",
                "catch",
                "class",
                "compl",
                "const_cast",
                "delete",
                "dynamic_cast",
                "explicit",
                "export",
                "final",
                "friend",
                "mutable",
                "namespace",
                "new",
                "not",
                "not_eq",
                "operator",
                "or",
                "or_eq",
                "private",
                "protected",
                "public",
                "reinterpret_cast",
                "static_cast",
                "template",
                "this",
                "throw",
                "try",
                "typeid",
                "typename",
                "typeid",
                "using",
                "virtual",
                "wchar_t",
                "xor",
                "xor_eq",

                // Keywords from C++0x
                "alignof",
                "char16_t",
                "char32_t",
                "constexpr",
                "decltype",
                "noexcept",
                "nullptr",
                "override",
                "static_assert",
                "thread_local",

                // Keywords from Clang C++ extensions
                "__has_nothrow_assign",
                "__has_nothrow_copy",
                "__has_nothrow_constructor",
                "__has_trivial_assign",
                "__has_trivial_copy",
                "__has_trivial_constructor",
                "__has_trivial_destructor",
                "__has_virtual_destructor",
                "__is_abstract",
                "__is_base_of",
                "__is_class",
                "__is_convertible_to",
                "__is_empty",
                "__is_enum",
                "__is_literal",
                "__is_literal_type",
                "__is_pod",
                "__is_polymorphic",
                "__is_trivial",
                "__is_union",
                "__is_trivially_copyable",
                "__underlying_type",
             );
            Type = "xcode.syntax.plain";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers*/
        };
    },
    {
        Identifier = "xcode.lang.cpp.interestingOperators";
        Syntax = {
            Words = (
                "...",
                "->",
                "::",
                ".",
             );
            Type = "xcode.syntax.plain";
        };
    },

/****************************************************************************/
// MARK: - C++ Syntax Coloring
/****************************************************************************/

    {
        Identifier = "xcode.lang.cpp";
        Description = "C++ Coloring";
        BasedOn = "xcode.lang.c";       // for text macros
        IncludeInMenu = YES;
        UsesCLikeIndentation = YES;
        Name = "C++";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            IncludeRules = (
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.parenexpr",
                "xcode.lang.cpp.class",
                "xcode.lang.cpp.method.definition",
                "xcode.lang.cpp.function.declaration",
                "xcode.lang.cpp.function.definition",
                "xcode.lang.cpp.typedef",
                "xcode.lang.cpp.templatedefinition",
                "xcode.lang.cpp.enumblock",
                "xcode.lang.cpp.nsenumblock",
                "xcode.lang.cpp.structblock",
                "xcode.lang.cpp.unionblock",
                "xcode.lang.cpp.namespace",
                "xcode.lang.cpp.externblock",
                "xcode.lang.cpp.block.toplevel",
                "xcode.lang.cpp.initializer",
            );
            Type = "xcode.syntax.plain";
        };
    },

    // The following rule returns tokens to the other rules
    {
        Identifier = "xcode.lang.cpp.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.string.eval",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.cpp.string.raw",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.cpp.identifier",
                "xcode.lang.c.number",
                "xcode.lang.cpp.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.cpp.lexer.toplevel";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.string.eval",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.cpp.string.raw",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.cpp.operatorclause",
                "xcode.lang.cpp.identifier",
                "xcode.lang.c.number",
                "xcode.lang.cpp.interestingOperators",
            );
        };
    },

    {
        // not good enough, but the native lexer does it right
        Identifier = "xcode.lang.cpp.string.raw";
        Syntax = {
            Start = "R\"(";
            End = ")\"";
            Type = "xcode.syntax.string";
        };
    },

    {
        Identifier = "xcode.lang.cpp.lexer.operator";
        Syntax = {
            IncludeRules = (
                "xcode.lang.cpp.identifier",
                "xcode.lang.cpp.anoperator",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.identifier.qualified";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "xcode.lang.cpp.identifier",
                "::",                               // need at least one qualifier or this rule shouldn't match at all
                "xcode.lang.cpp.function.name.tilde?",
                "xcode.lang.cpp.operatorclause|xcode.lang.cpp.identifier",
                "xcode.lang.cpp.identifier.qualified.more*",
            );
            Type = "xcode.syntax.declaration.other";
        };
    },

    {
        Identifier = "xcode.lang.cpp.identifier.qualified.more";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "::",
                "xcode.lang.cpp.function.name",
            );
        };
    },

    /****************************************************************************/
    // MARK: - Attributes or preprocessor macros we want to ignore
    /****************************************************************************/

    {
        Identifier = "xcode.lang.cpp.expression.attribute.function";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "__attribute__|xcode.lang.generated.preprocessor.function.ignore",
                "xcode.lang.cpp.parenexpr",
            );
        };
    },

    /****************************************************************************/
    // MARK: - Functions/Methods
    /****************************************************************************/

    {
        Identifier = "xcode.lang.cpp.function.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "xcode.lang.cpp.function.declarator",
                "const?",
                "override?",
                "final?",
                "override?",
                "xcode.lang.cpp.noexceptclause?",
                "xcode.lang.cpp.throwclause?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.returnclause?",
                ";",
            );
            Type = "xcode.syntax.declaration.function";
        };
    },
    {
        Identifier = "xcode.lang.cpp.function.definition";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "xcode.lang.cpp.function.declarator",
                "const?",
                "override?",
                "final?",
                "override?",
                "xcode.lang.cpp.noexceptclause?",
                "xcode.lang.cpp.throwclause?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.returnclause?",
                "xcode.lang.cpp.block.function",
            );
            Type = "xcode.syntax.definition.function";
        };
    },

    {
        Identifier = "xcode.lang.cpp.function.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "xcode.lang.cpp.function.name",
                "xcode.lang.cpp.templateclause?",
                "xcode.lang.cpp.function.declarator.parameters",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.cpp.function.declarator.parameters";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "xcode.lang.cpp.function.parameter.start",
                "xcode.lang.cpp.function.parameter.more*",
                ")",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.function.name";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "xcode.lang.cpp.function.name.tilde?",
                "xcode.lang.cpp.identifier|xcode.lang.cpp.operatorclause",
            );
            Type = "xcode.syntax.declaration.other";
        };
    },
    {
        Identifier = "xcode.lang.cpp.function.name.tilde";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "~",
            );
            Type = "xcode.syntax.name.partial";
        };
    },

    {
        Identifier = "xcode.lang.cpp.operatorclause";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.operator";
            Rules = (
                "operator",
                "xcode.lang.cpp.anoperator",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.anoperator";
        Syntax = {
            Match = (
                "^[ \t]*(new|delete|->\\*|->|,|\\+\\+|--|\\|\\||&&|>>=|<<=|>>|<<|>=|<=|==|!=|\\|=|&=|\\^=|%=|/=|\\*=|-=|\\+=|>|<|\\+|-|\\*|/|%|\\^|&|\\||~|!|=|\\[\\]|\\(\\))[ \t]*",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.function.parameter.start";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Start = "(";
            Until = ")";
            AltUntil = ",";
            IncludeRules = (
                //"xcode.lang.cpp.function.parameter.function",
                "xcode.lang.cpp.parenexpr",
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.templateclause",
            );
            Type = "xcode.syntax.name.parameter";
        };
    },
    {
        Identifier = "xcode.lang.cpp.function.parameter.more";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Start = ",";
            Until = ")";
            AltUntil = ",";
            IncludeRules = (
                //"xcode.lang.cpp.function.parameter.function",
                "xcode.lang.cpp.parenexpr",
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.templateclause",
            );
            Type = "xcode.syntax.name.parameter";
        };
    },
    {
        Identifier = "xcode.lang.cpp.function.parameter.function";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "(",
                "*",
                "xcode.lang.cpp.identifier",
                ")",
            );
            Type = "xcode.syntax.name.parameter.function";
        };
    },

    /****************************************************************************/
    // MARK: - Classes
    /****************************************************************************/

    {
        Identifier = "xcode.lang.cpp.class";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "xcode.lang.cpp.class.declarator",
                "final?",
                "xcode.lang.cpp.basetype?",
                "xcode.lang.cpp.block.class",
            );
            Type = "xcode.syntax.definition.class";
        };
    },
    {
        Identifier = "xcode.lang.cpp.class.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "class",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.class.name",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.class.name";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "xcode.lang.cpp.identifier",
            );
            Type = "xcode.syntax.declaration.type";
        };
    },

    {
        Identifier = "xcode.lang.cpp.basetype";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Start = ":";
            Until = "{";
            AltUntil = ";";     // just as a backstop to avoid sucking up too much
            IncludeRules = (
                "xcode.lang.cpp.templateclause",
                "xcode.lang.cpp.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.method.declaration.classscope";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "xcode.lang.cpp.function.declarator",   // Looks like a function, but it's really a method.
                "const?",
                "override?",
                "final?",
                "override?",
                "xcode.lang.cpp.noexceptclause?",
                "xcode.lang.cpp.throwclause?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.returnclause?",
                ";",
            );
            Type = "xcode.syntax.declaration.method";
        };
    },

    {
        Identifier = "xcode.lang.cpp.method.definition.classscope";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "xcode.lang.cpp.function.declarator",   // Looks like a function, but it's really a method.
                "const?",
                "override?",
                "final?",
                "override?",
                "xcode.lang.cpp.noexceptclause?",
                "xcode.lang.cpp.throwclause?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.initializerclause?",
                "xcode.lang.cpp.returnclause?",
                "xcode.lang.cpp.block.function",
            );
            Type = "xcode.syntax.definition.method";
        };
    },

    {
        Identifier = "xcode.lang.cpp.method.definition";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "xcode.lang.cpp.method.declarator",
                "const?",
                "xcode.lang.cpp.noexceptclause?",
                "xcode.lang.cpp.throwclause?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.initializerclause?",
                "xcode.lang.cpp.returnclause?",
                "xcode.lang.cpp.block.function",
            );
            Type = "xcode.syntax.definition.method";
        };
    },

    {
        Identifier = "xcode.lang.cpp.method.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Rules = (
                "xcode.lang.cpp.identifier.qualified",
                "xcode.lang.cpp.templateclause?",
                "xcode.lang.cpp.function.declarator.parameters",
            );
            Type = "xcode.syntax.name.tree";
        };
    },

    {
        Identifier = "xcode.lang.cpp.throwclause";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "throw",
                "xcode.lang.cpp.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.cpp.noexceptclause";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "noexcept",
                "xcode.lang.cpp.parenexpr?",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.templatedefinition";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "template",
                "xcode.lang.cpp.templateclause",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.templateclause";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Start = "<";
            End = ">";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.initializerclause";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Start = ":";
            Until = "{";
            IncludeRules = (
                "xcode.lang.cpp.templateclause",
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.returnclause";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Start = "->";
            Until = "{";
            AltUntil = ";";
            IncludeRules = (
                "xcode.lang.cpp.templateclause",
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.parenexpr",
            );
        };
    },

    /****************************************************************************/
    // MARK: - Enums/Structs/Unions
    /****************************************************************************/

    {
        Identifier = "xcode.lang.cpp.enumblock";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "xcode.lang.cpp.enum.declarator",
                "xcode.lang.cpp.basetype?",
                "xcode.lang.cpp.block",
            );
            Type = "xcode.syntax.declaration.enum";
        };
    },
    {
        Identifier = "xcode.lang.cpp.enum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "enum",
                "class|struct?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.enum.name?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.cpp.nsenumblock";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "xcode.lang.cpp.nsenum.declarator",
                "xcode.lang.cpp.block",
            );
            Type = "xcode.syntax.declaration.enum";
        };
    },
    {
        Identifier = "xcode.lang.cpp.nsenum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "NS_ENUM",
                "(",
                "xcode.lang.cpp.identifier",
                "xcode.lang.cpp.enum.optionalname?",
                ")",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.cpp.enum.optionalname";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                ",",
                "xcode.lang.cpp.enum.name",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.cpp.enum.name";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "xcode.lang.cpp.identifier",
            );
            Type = "xcode.syntax.declaration.type";
        };
    },
    {
        Identifier = "xcode.lang.cpp.structblock";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "xcode.lang.cpp.struct.declarator",
                "final?",
                "xcode.lang.cpp.basetype?",
                "xcode.lang.cpp.block.class",
            );
            Type = "xcode.syntax.declaration.struct";
        };
    },
    {
        Identifier = "xcode.lang.cpp.struct.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "struct",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.struct.name?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.cpp.struct.name";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "xcode.lang.cpp.identifier",
            );
            Type = "xcode.syntax.declaration.type";
        };
    },
    {
        Identifier = "xcode.lang.cpp.unionblock";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "xcode.lang.cpp.union.declarator",
                "xcode.lang.cpp.typeblock",
            );
            Type = "xcode.syntax.declaration.union";
        };
    },
    {
        Identifier = "xcode.lang.cpp.union.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "union",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.union.name?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.cpp.union.name";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "xcode.lang.cpp.identifier",
            );
            Type = "xcode.syntax.declaration.type";
        };
    },
    {
        Identifier = "xcode.lang.cpp.typeidentifier";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "xcode.lang.cpp.identifier|int|char|float|double|short|long|unsigned|signed",
            );
        };
    },

/****************************************************************************/
// MARK: - Typedefs
/****************************************************************************/

    {
        Identifier = "xcode.lang.cpp.lexer.typedef";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.string.eval",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.cpp.string.raw",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.cpp.operatorclause",
                "xcode.lang.cpp.typedef.end",
                "xcode.lang.cpp.identifier",
                "xcode.lang.c.number",
                "xcode.lang.cpp.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.cpp.lexer.typedef.name";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.string.eval",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.cpp.string.raw",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.cpp.operatorclause",
                "xcode.lang.cpp.typedef.name",
                "xcode.lang.cpp.identifier",
                "xcode.lang.c.number",
                "xcode.lang.cpp.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.cpp.typedef";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.typedef";
            Start = "typedef";
            End = "xcode.lang.cpp.typedef.end";
            AltEnd = ";";
            IncludeRules = (
                "xcode.lang.cpp.enumblock",
                "xcode.lang.cpp.nsenumblock",
                "xcode.lang.cpp.structblock",
                "xcode.lang.cpp.unionblock",
                "xcode.lang.cpp.typedef.function",
                "xcode.lang.cpp.block",
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.parenexpr",
            );
            Type = "xcode.syntax.typedef";
        };
    },
    {
        Identifier = "xcode.lang.cpp.typedef.name";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Rules = (
                "xcode.lang.cpp.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.cpp.typedef.end";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.typedef.name";
            Rules = (
                "xcode.lang.cpp.typedef.name",
                ";"
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.cpp.typedef.function";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.typedef.name";
            Rules = (
                "(",
                "*",
                "xcode.lang.cpp.typedef.name",
                ")",
            );
            Type = "xcode.syntax.name.tree";
        };
    },


/****************************************************************************/
// MARK: - C++ Blocks
/****************************************************************************/

    {
        Identifier = "xcode.lang.cpp.block";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.cpp.typeblock";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.parenexpr",
                "xcode.lang.cpp.structblock",
                "xcode.lang.cpp.unionblock",
            );
        };
    },

    // toplevel blocks like namespaces and extern "C"
    {
        Identifier = "xcode.lang.cpp.block.toplevel";
        BasedOn = "xcode.lang.cpp.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.cpp.class",
                "xcode.lang.cpp.method.definition",
                "xcode.lang.cpp.function.declaration",
                "xcode.lang.cpp.function.definition",
                "xcode.lang.cpp.typedef",
                "xcode.lang.cpp.templatedefinition",
                "xcode.lang.cpp.enumblock",
                "xcode.lang.cpp.nsenumblock",
                "xcode.lang.cpp.structblock",
                "xcode.lang.cpp.unionblock",
                "xcode.lang.cpp.namespace",
                "xcode.lang.cpp.externblock",
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.parenexpr",
                "xcode.lang.cpp.initializer",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.cpp.namespace";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Foldable = YES;
            Rules = (
                "namespace",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.identifier?",
                "xcode.lang.completionplaceholder?",
                "xcode.lang.cpp.block.toplevel",
            );
            Type = "xcode.syntax.topLevelBlock";
        };
    },

    {
        Identifier = "xcode.lang.cpp.externblock";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Foldable = YES;
            Rules = (
                "extern",
                "xcode.lang.string",
                "xcode.lang.cpp.block.toplevel",
            );
            Type = "xcode.syntax.topLevelBlock";
        };
    },

    {
        Identifier = "xcode.lang.cpp.block.class";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.cpp.method.declaration.classscope",
                "xcode.lang.cpp.method.definition.classscope",
                "xcode.lang.cpp.class",
                "xcode.lang.cpp.typedef",
                "xcode.lang.cpp.enumblock",
                "xcode.lang.cpp.nsenumblock",
                "xcode.lang.cpp.structblock",
                "xcode.lang.cpp.unionblock",
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.parenexpr",
                "xcode.lang.cpp.initializer",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.block.function";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.cpp.class",
                "xcode.lang.cpp.typedef",
                "xcode.lang.cpp.enumblock",
                "xcode.lang.cpp.nsenumblock",
                "xcode.lang.cpp.structblock",
                "xcode.lang.cpp.unionblock",
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.parenexpr";
        BasedOn = "xcode.lang.c.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Start = "(";
            End = ")";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.cpp.bracketexpr",
                "xcode.lang.cpp.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.cpp.bracketexpr";
        BasedOn = "xcode.lang.c.bracketexpr";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer";
            Start = "[";
            End = "]";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.cpp.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.cpp.initializer";
        Syntax = {
            Tokenizer = "xcode.lang.cpp.lexer.toplevel";
            Start = "=";
            End = ";";
            Recursive = NO;
            IncludeRules = (
                "xcode.lang.cpp.block",
                "xcode.lang.cpp.parenexpr",
                "xcode.lang.cpp.bracketexpr",
            );
        };
    },
)

