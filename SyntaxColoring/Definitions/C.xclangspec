// C
(

/****************************************************************************/
// MARK: C Preprocessor
/****************************************************************************/

    {
        Identifier = "xcode.lang.c.preprocessor";
        Syntax = {
            Start = "#";
            EscapeChar = "\\";
            End = "\n";
            
            // only recognize the '#' if it's the first non-whitespace on a line
            StartAtBOL = YES;
            
            // multi-line comments extend the preprocessor statement across lines too
            Tokenizer = "xcode.lang.c.preprocessor.lexer";
            IncludeRules = (
                "xcode.lang.c.preprocessor.mark",
                "xcode.lang.c.preprocessor.include",
                "xcode.lang.c.preprocessor.systeminclude",
                "xcode.lang.c.preprocessor.import",
                "xcode.lang.c.preprocessor.systemimport",
                "xcode.lang.c.preprocessor.define",
                "xcode.lang.c.preprocessor.warning",
                "xcode.lang.c.preprocessor.error",
            );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.c.preprocessor.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.c.number",
                "xcode.lang.c.preprocessor.identifier",
            );
        };
    },
    {
        Identifier = "xcode.lang.c.preprocessor.systemIncludeString";
        Syntax = {
            Start = "<";
            End = ">";
            AltEnd = "\n";
            Type = "xcode.syntax.string";
        };
    },

    {
        Identifier = "xcode.lang.c.preprocessor.identifier";
        Syntax = {
            Tokenizer = "xcode.lang.malterlib.lexer";
            IncludeRules = (
                "xcode.lang.malterlib.keyword.builtinconstant",
                "xcode.lang.malterlib.constant",
                "xcode.lang.malterlib.constant.private",
                "xcode.lang.malterlib.namespace",
                "xcode.lang.malterlib.namespace.explicit",
                "xcode.lang.malterlib.templatetypeparam",
                "xcode.lang.malterlib.functiontemplatetypeparam",
                "xcode.lang.malterlib.constant.template",
                "xcode.lang.malterlib.constant.templatefunction",
                "xcode.lang.malterlib.type",
                "xcode.lang.malterlib.type.explicit",
                "xcode.lang.malterlib.functor.param",
                "xcode.lang.malterlib.functor.param.output",
                "xcode.lang.malterlib.functor.member",
                "xcode.lang.malterlib.functor.member.private",
                "xcode.lang.malterlib.member",
                "xcode.lang.malterlib.member.private",
                "xcode.lang.malterlib.function",
                "xcode.lang.malterlib.function.explicit",
                "xcode.lang.malterlib.function.private",
                "xcode.lang.malterlib.function.global",
                "xcode.lang.malterlib.function.global.explicit",
                "xcode.lang.malterlib.macro",
                "xcode.lang.malterlib.macro.explicit",
                "xcode.lang.malterlib.macro.parameter",
                "xcode.lang.malterlib.function.parameter",
                "xcode.lang.malterlib.function.parameter.output",
                "xcode.lang.malterlib.member.static",
                "xcode.lang.malterlib.member.static.private",
                "xcode.lang.malterlib.global",
                "xcode.lang.malterlib.functor.local",
                "xcode.lang.malterlib.keyword.qualifiers",
                "xcode.lang.malterlib.keyword.storageclass",
                "xcode.lang.malterlib.keyword.builtintype",
                "xcode.lang.malterlib.keyword.builtincharactertype",
                "xcode.lang.malterlib.keyword.builtinintegertype",
                "xcode.lang.malterlib.keyword.builtintypemodifier",
                "xcode.lang.malterlib.keyword.builtinvectortype",
                "xcode.lang.malterlib.keyword.builtinfloattype",
                "xcode.lang.malterlib.keyword.exceptionhandling",
                "xcode.lang.malterlib.keyword.introspection",
                "xcode.lang.malterlib.keyword.staticassert",
                "xcode.lang.malterlib.keyword.controlstatement",
                "xcode.lang.malterlib.keyword.optimization",
                "xcode.lang.malterlib.keyword.propertymodifier",
                "xcode.lang.malterlib.keyword.newdelete",
                "xcode.lang.malterlib.keyword.clr",
                "xcode.lang.malterlib.keyword.other",
                "xcode.lang.malterlib.keyword.typespecification",
                "xcode.lang.malterlib.keyword.namespace",
                "xcode.lang.malterlib.keyword.typename",
                "xcode.lang.malterlib.keyword.template",
                "xcode.lang.malterlib.keyword.typedef",
                "xcode.lang.malterlib.keyword.using",
                "xcode.lang.malterlib.keyword.auto",
                "xcode.lang.malterlib.keyword.js.var",
                "xcode.lang.malterlib.keyword.this",
                "xcode.lang.malterlib.keyword.operator",
                "xcode.lang.malterlib.keyword.access",
                "xcode.lang.malterlib.keyword.virtual",
                "xcode.lang.malterlib.keyword.casts",
                "xcode.lang.malterlib.keyword.ignore",
                "xcode.lang.malterlib.variable",
            );
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
                "assert",
                "define",
                "defined",
                "elif",
                "else",
                "endif",
                "error",
                "if",
                "ifdef",
                "ifndef",
                "import",
                "include",
                "include_next",
                "line",
                "pragma",
                "unassert",
                "undef",
                "warning",
             );
            Type = "xcode.syntax.plain";
            AltType = "xcode.syntax.identifier";
        };
    }, 
 
    {
        Identifier = "xcode.lang.c.preprocessor.mark";
        Syntax = {
            Tokenizer = "xcode.lang.c.preprocessor.lexer";
            Rules = (
                "pragma",
                "xcode.lang.c.preprocessor.mark.therest",
            );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.c.preprocessor.mark.therest";
        Syntax = {
            Match = (
                "^[ \t]*mark[ \t]*\(.*\)$"
            );
            CaptureTypes = (
                "xcode.syntax.mark"
            );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.c.preprocessor.define";
        Syntax = {
            Tokenizer = "xcode.lang.c.preprocessor.lexer";
            Rules = (
                "define",
                "xcode.lang.c.preprocessor.define.name",
            );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.c.preprocessor.define.name";
        Syntax = {
            Tokenizer = "xcode.lang.c.preprocessor.lexer";
            Rules = (
                "xcode.lang.c.preprocessor.identifier",
            );
            Type = "xcode.syntax.identifier.macro";
        };
    },
    {
        Identifier = "xcode.lang.c.preprocessor.warning";
        Syntax = {
            Start = "warning";
            EscapeChar = "\\";
            Until = "\n";
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.c.preprocessor.error";
        Syntax = {
            Start = "error";
            EscapeChar = "\\";
            Until = "\n";
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.c.preprocessor.include.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.string",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.c.preprocessor.systemIncludeString",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.c.number",
                "xcode.lang.c.preprocessor.identifier",
            );
        };
    },
    {
        Identifier = "xcode.lang.c.preprocessor.include";
        Syntax = {
            Tokenizer = "xcode.lang.c.preprocessor.include.lexer";
            Rules = (
                "include",
                "xcode.lang.string",
            );
            Type = "xcode.syntax.preprocessor.include";
        };
    },
    {
        Identifier = "xcode.lang.c.preprocessor.systeminclude";
        Syntax = {
            Tokenizer = "xcode.lang.c.preprocessor.include.lexer";
            Rules = (
                "include",
                "xcode.lang.c.preprocessor.systemIncludeString",
            );
            Type = "xcode.syntax.preprocessor.include";
        };
    },
    {
        Identifier = "xcode.lang.c.preprocessor.import";
        Syntax = {
            Tokenizer = "xcode.lang.c.preprocessor.include.lexer";
            Rules = (
                "import",
                "xcode.lang.string",
            );
            Type = "xcode.syntax.preprocessor.include";
        };
    },
    {
        Identifier = "xcode.lang.c.preprocessor.systemimport";
        Syntax = {
            Tokenizer = "xcode.lang.c.preprocessor.include.lexer";
            Rules = (
                "import",
                "xcode.lang.c.preprocessor.systemIncludeString",
            );
            Type = "xcode.syntax.preprocessor.include";
        };
    },


/****************************************************************************/
// MARK: - HeaderDoc/Doxygen
/****************************************************************************/

    {
        // Handle the degenerate case of '/**/' comments. They look like the start of a JavaDoc comment, but they aren't.
        Identifier = "xcode.lang.comment.degenerate";
        Syntax = {
            StartChars = "/";
            Chars = "/*";
            Words = ( "/**/" );
            Type = "xcode.syntax.comment";
        };
    },
    {
        Identifier = "xcode.lang.comment.headerdoc";
        BasedOn = "xcode.lang.comment";   // for text macros only
        Syntax = {
            Start = "/*!";
            End = "*/";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.url",
                "xcode.lang.url.mail",
                "xcode.lang.comment.mark"
            );
            Type = "xcode.syntax.comment";
        };
    },

    {
        Identifier = "xcode.lang.comment.headerdoc.star";
        BasedOn = "xcode.lang.comment";   // for text macros only
        Syntax = {
            Start = "/**";
            End = "*/";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.url",
                "xcode.lang.url.mail",
                "xcode.lang.comment.mark"
            );
            Type = "xcode.syntax.comment";
        };
    },

    {
        Identifier = "xcode.lang.comment.headerdoc.singleline.bang";
        BasedOn = "xcode.lang.comment"; // for text macros
        Syntax = {
            Start = "//!";
            Until = "\n";
            IncludeRules = (
                "xcode.lang.url",
                "xcode.lang.url.mail",
                "xcode.lang.comment.mark"
            );
            Type = "xcode.syntax.comment";
        };
    },

    {
        Identifier = "xcode.lang.comment.headerdoc.singleline.slash";
        BasedOn = "xcode.lang.comment"; // for text macros
        Syntax = {
            Start = "///";
            Until = "\n";
            IncludeRules = (
                "xcode.lang.url",
                "xcode.lang.url.mail",
                "xcode.lang.comment.mark"
            );
            Type = "xcode.syntax.comment";
        };
    },


/****************************************************************************/
// MARK: - C keywords
/****************************************************************************/

    {
        Identifier = "xcode.lang.c.identifier.default";
        Syntax = {
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            CheckPreprocessorKnownMacros = YES;
            Words = (
                "__alignof",
                "__alignof__",
                "__asm",
                "__asm__",
                "__attribute__",
                "__auto_type",
                "__block",
                "__builtin_choose_expr",
                "__builtin_offsetof",
                "__builtin_types_compatible_p",
                "__builtin_va_arg",
                "__complex",
                "__complex__",
                "__const",
                "__const__",
                "__extension__",
                "__func__",
                "__imag",
                "__imag__",
                "__label__",
                "__nonnull",
                "__nullable",
                "__null_unspecified",
                "__real",
                "__real__",
                "__restrict",
                "__restrict__",
                "__signed",
                "__signed__",
                "__thread",
                "__typeof",
                "__typeof__",
                "__volatile",
                "__volatile__",
                "__FUNCTION__",
                "__PRETTY_FUNCTION__",
                "_Bool",
                "_Complex",
                "_Decimal32",
                "_Decimal64",
                "_Decimal128",
                "_Imaginary",
                "_Nonnull",
                "_Nullable",
                "_Null_unspecified",
                "asm",
                "auto",
                "bool",
                "break",
                "case",
                "char",
                "const",
                "continue",
                "default",
                "do",
                "double",
                "else",
                "enum",
                "extern",
                "false",
                "float",
                "for",
                "goto",
                "if",
                "inline",
                "int",
                "long",
                "register",
                "restrict",
                "return",
                "short",
                "signed",
                "sizeof",
                "static",
                "struct",
                "switch",
                "true",
                "typedef",
                "typeof",
                "union",
                "unsigned",
                "void",
                "volatile",
                "while",
                "FALSE",
                "NULL",
                "TRUE",
                "_Alignas",
                "_Alignof",
                "_Atomic",
                "_Generic",
                "_Noreturn",
                "_Static_assert",
                "_Thread_local",
             );
            Type = "xcode.syntax.plain";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers*/
        };
    },
    {
        Identifier = "xcode.lang.c.identifier";
        Syntax = {
            Tokenizer = "xcode.lang.malterlib.lexer";
            IncludeRules = (
                "xcode.lang.malterlib.keyword.builtinconstant",
                "xcode.lang.malterlib.constant",
                "xcode.lang.malterlib.constant.private",
                "xcode.lang.malterlib.namespace",
                "xcode.lang.malterlib.namespace.explicit",
                "xcode.lang.malterlib.templatetypeparam",
                "xcode.lang.malterlib.functiontemplatetypeparam",
                "xcode.lang.malterlib.constant.template",
                "xcode.lang.malterlib.constant.templatefunction",
                "xcode.lang.malterlib.type",
                "xcode.lang.malterlib.type.explicit",
                "xcode.lang.malterlib.functor.param",
                "xcode.lang.malterlib.functor.param.output",
                "xcode.lang.malterlib.functor.member",
                "xcode.lang.malterlib.functor.member.private",
                "xcode.lang.malterlib.member",
                "xcode.lang.malterlib.member.private",
                "xcode.lang.malterlib.function",
                "xcode.lang.malterlib.function.explicit",
                "xcode.lang.malterlib.function.private",
                "xcode.lang.malterlib.function.global",
                "xcode.lang.malterlib.function.global.explicit",
                "xcode.lang.malterlib.macro",
                "xcode.lang.malterlib.macro.explicit",
                "xcode.lang.malterlib.macro.parameter",
                "xcode.lang.malterlib.function.parameter",
                "xcode.lang.malterlib.function.parameter.output",
                "xcode.lang.malterlib.member.static",
                "xcode.lang.malterlib.member.static.private",
                "xcode.lang.malterlib.global",
                "xcode.lang.malterlib.functor.local",
                "xcode.lang.malterlib.keyword.qualifiers",
                "xcode.lang.malterlib.keyword.storageclass",
                "xcode.lang.malterlib.keyword.builtintype",
                "xcode.lang.malterlib.keyword.builtincharactertype",
                "xcode.lang.malterlib.keyword.builtinintegertype",
                "xcode.lang.malterlib.keyword.builtintypemodifier",
                "xcode.lang.malterlib.keyword.builtinvectortype",
                "xcode.lang.malterlib.keyword.builtinfloattype",
                "xcode.lang.malterlib.keyword.exceptionhandling",
                "xcode.lang.malterlib.keyword.introspection",
                "xcode.lang.malterlib.keyword.staticassert",
                "xcode.lang.malterlib.keyword.controlstatement",
                "xcode.lang.malterlib.keyword.optimization",
                "xcode.lang.malterlib.keyword.propertymodifier",
                "xcode.lang.malterlib.keyword.newdelete",
                "xcode.lang.malterlib.keyword.clr",
                "xcode.lang.malterlib.keyword.other",
                "xcode.lang.malterlib.keyword.typespecification",
                "xcode.lang.malterlib.keyword.namespace",
                "xcode.lang.malterlib.keyword.typename",
                "xcode.lang.malterlib.keyword.template",
                "xcode.lang.malterlib.keyword.typedef",
                "xcode.lang.malterlib.keyword.using",
                "xcode.lang.malterlib.keyword.auto",
                "xcode.lang.malterlib.keyword.js.var",
                "xcode.lang.malterlib.keyword.this",
                "xcode.lang.malterlib.keyword.operator",
                "xcode.lang.malterlib.keyword.access",
                "xcode.lang.malterlib.keyword.virtual",
                "xcode.lang.malterlib.keyword.casts",
                "xcode.lang.malterlib.keyword.ignore",
                "xcode.lang.malterlib.keyword.preprocessordirective",
                "xcode.lang.malterlib.variable",
                "xcode.lang.c.identifier.default",
            );
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
             );
            Type = "xcode.syntax.plain";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers
        };
    },
    {
        Identifier = "xcode.lang.c.interestingOperators";
        Syntax = {
            Words = (
                "...",
                ".",
                "->",
             );
            Type = "xcode.syntax.plain";
        };
    },
    {
        // adds C++14 support for single quote separators
        Identifier = "xcode.lang.c.number";
        BasedOn = "xcode.lang.number";
        Syntax = {
            SourceScannerClassName = NumberScanner;
            StartChars = "+-0123456789.";
            Chars = "0123456789'+-.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            Match = (
                "^[+-]?0[bB][01']+([lLuU])*",
                "^[+-]?0[xX][0-9a-fA-F']+((\\.[0-9a-fA-F']*)?([pP][+-]?[0-9']+)?)?([lLfFuU])*",
                "^[+-]?0[xX][0-9a-fA-F']*\\.[0-9a-fA-F']+([pP][+-]?[0-9']+)?([lLfFuU])*",
                "^[+-]?[0-9']+((\\.[0-9']*)?([eE][+-]?[0-9']+)?)?([lLfFuU])*",
                "^[+-]?[0-9']*\\.[0-9']+([eE][+-]?[0-9']+)?([lLfFuU])*",
            );
            Type = "xcode.syntax.number";
        };
    },


/****************************************************************************/
// MARK: - C Syntax Coloring
/****************************************************************************/

    {
        Identifier = "xcode.lang.c";
        Description = "C Coloring";
        IncludeInMenu = YES;
        BasedOn = "xcode.lang.simpleColoring";  // for text macros
        UsesCLikeIndentation = YES;
        Name = "C";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            IncludeRules = (
                "xcode.lang.c.function.declaration",
                "xcode.lang.c.function.knr",
                "xcode.lang.c.function",
                "xcode.lang.c.typedef",
                "xcode.lang.c.enumblock",
                "xcode.lang.c.nsenumblock",
                "xcode.lang.c.structblock",
                "xcode.lang.c.unionblock",
                "xcode.lang.c.block.toplevel",
                "xcode.lang.c.bracketexpr",
                "xcode.lang.c.parenexpr",
                "xcode.lang.c.initializer",
            );
            Type = "xcode.syntax.plain";
        };
    },
    
    // toplevel blocks like namespaces and extern "C"
    {
        Identifier = "xcode.lang.c.block.toplevel";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.c.function.declaration",
                "xcode.lang.c.function",
                "xcode.lang.c.typedef",
                "xcode.lang.c.block",
                "xcode.lang.c.bracketexpr",
                "xcode.lang.c.parenexpr",
                "xcode.lang.c.initializer",
            );
            Type = "xcode.syntax.plain";
        };
    },

    // The following rule returns tokens to the other rules
    {
        Identifier = "xcode.lang.c.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.c.identifier",
                "xcode.lang.c.number",
                "xcode.lang.c.interestingOperators",
            );
        };
    },

    /****************************************************************************/
    // MARK: - Attributes or preprocessor macros we want to ignore
    /****************************************************************************/

    {
        Identifier = "xcode.lang.c.expression.attribute";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "__attribute__|xcode.lang.generated.preprocessor.function.ignore",
                "xcode.lang.c.parenexpr",
            );
        };
    },
    
/****************************************************************************/
// MARK: - Functions
/****************************************************************************/

    {
        Identifier = "xcode.lang.c.function.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.function.declarator",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.c.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                ";"
            );
            Type = "xcode.syntax.declaration.function";
        };
    },
    {
        Identifier = "xcode.lang.c.function";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.function.declarator",
                "xcode.lang.generated.preprocessor.ignore*",
//                "xcode.lang.c.expression.attribute*", // Disabled for now since the native parser can't parse the paren expression inside here.
                "xcode.lang.c.block",
            );
            Type = "xcode.syntax.definition.function";
        };
    },
    {
        Identifier = "xcode.lang.c.function.knr";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.function.declarator",
                "xcode.lang.c.identifier|auto|char|const|double|enum|float|int|long|register|short|signed|struct|union|unsigned|void",
                "xcode.lang.c.knrargs+",
                "xcode.lang.c.block",
            );
            Type = "xcode.syntax.definition.function";
        };
    },
    {
        Identifier = "xcode.lang.c.knrargs";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.identifier|auto|char|const|double|enum|float|int|long|register|short|signed|struct|union|unsigned|void|*|,*",
                "xcode.lang.c.parenexpr*",
                "xcode.lang.c.bracketexpr*",
                ";",
            );
        };
    },
    {
        Identifier = "xcode.lang.c.function.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.function.name",
                "xcode.lang.c.function.declarator.parameters",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.c.function.declarator.parameters";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.function.parameter.start",
                "xcode.lang.c.function.parameter.more*",
                ")",
            );
        };
    },
    {
        Identifier = "xcode.lang.c.function.name";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.identifier",
            );
            Type = "xcode.syntax.declaration.other";
        };
    },
    {
        Identifier = "xcode.lang.c.function.parameter.start";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Start = "(";
            Until = ")";
            AltUntil = ",";
            IncludeRules = (
                //"xcode.lang.c.function.parameter.function",
                "xcode.lang.c.parenexpr",
                "xcode.lang.c.bracketexpr",
            );
            Type = "xcode.syntax.name.parameter";
        };
    },
    {
        Identifier = "xcode.lang.c.function.parameter.more";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Start = ",";
            Until = ")";
            AltUntil = ",";
            IncludeRules = (
                //"xcode.lang.c.function.parameter.function",
                "xcode.lang.c.parenexpr",
                "xcode.lang.c.bracketexpr",
            );
            Type = "xcode.syntax.name.parameter";
        };
    },
    {
        Identifier = "xcode.lang.c.function.parameter.function";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "(",
                "*",
                "xcode.lang.c.identifier",
                ")",
            );
            Type = "xcode.syntax.name.parameter.function";
        };
    },
    
/****************************************************************************/
// MARK: - Typedefs
/****************************************************************************/

    {
        Identifier = "xcode.lang.c.lexer.typedef";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.c.typedef.end",
                "xcode.lang.c.identifier",
                "xcode.lang.c.number",
                "xcode.lang.c.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.c.lexer.typedef.name";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.c.typedef.name",
                "xcode.lang.c.identifier",
                "xcode.lang.c.number",
                "xcode.lang.c.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.c.typedef";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer.typedef";
            Start = "typedef";
            End = "xcode.lang.c.typedef.end";
            AltEnd = ";";
            IncludeRules = (
                "xcode.lang.c.enumblock",
                "xcode.lang.c.nsenumblock",
                "xcode.lang.c.structblock",
                "xcode.lang.c.unionblock",
                "xcode.lang.c.typedef.function",
                "xcode.lang.c.block",
                "xcode.lang.c.bracketexpr",
                "xcode.lang.c.parenexpr",
            );
            Type = "xcode.syntax.typedef";
        };
    },
    {
        Identifier = "xcode.lang.c.typedef.name";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.c.typedef.end";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer.typedef.name";
            Rules = (
                "xcode.lang.c.typedef.name",
                ";"
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.c.typedef.function";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer.typedef.name";
            Rules = (
                "(",
                "*",
                "xcode.lang.c.typedef.name",
                ")",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    
/****************************************************************************/
// MARK: - Blocks and such
/****************************************************************************/

    {
        Identifier = "xcode.lang.c.block";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.c.bracketexpr",
                "xcode.lang.c.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.c.typeblock";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.c.bracketexpr",
                "xcode.lang.c.parenexpr",
                "xcode.lang.c.structblock",
                "xcode.lang.c.unionblock",
            );
        };
    },
    {
        Identifier = "xcode.lang.c.enumblock";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.enum.declarator",
                "xcode.lang.c.block",
            );
            Type = "xcode.syntax.declaration.enum";
        };
    },
    {
        Identifier = "xcode.lang.c.enum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "enum",
                "xcode.lang.c.enum.name?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.c.nsenumblock";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.nsenum.declarator",
                "xcode.lang.c.block",
            );
            Type = "xcode.syntax.declaration.enum";
        };
    },
    {
        Identifier = "xcode.lang.c.nsenum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "NS_ENUM",
                "(",
                "xcode.lang.c.identifier",
                "xcode.lang.c.enum.optionalname?",
                ")",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.c.enum.optionalname";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                ",",
                "xcode.lang.c.enum.name",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.c.enum.name";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.identifier",
            );
            Type = "xcode.syntax.declaration.type";
        };
    },
    {
        Identifier = "xcode.lang.c.structblock";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.struct.declarator",
                "xcode.lang.c.typeblock",
            );
            Type = "xcode.syntax.declaration.struct";
        };
    },
    {
        Identifier = "xcode.lang.c.struct.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "struct",
                "xcode.lang.c.struct.name?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.c.struct.name";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.identifier",
            );
            Type = "xcode.syntax.declaration.type";
        };
    },
    {
        Identifier = "xcode.lang.c.unionblock";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.union.declarator",
                "xcode.lang.c.typeblock",
            );
            Type = "xcode.syntax.declaration.union";
        };
    },
    {
        Identifier = "xcode.lang.c.union.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "union",
                "xcode.lang.c.union.name?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.c.union.name";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Rules = (
                "xcode.lang.c.identifier",
            );
            Type = "xcode.syntax.declaration.type";
        };
    },
    
    {
        Identifier = "xcode.lang.c.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Start = "(";
            End = ")";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.c.block",
                "xcode.lang.c.bracketexpr",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.c.bracketexpr";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Start = "[";
            End = "]";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.c.parenexpr",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.c.initializer";
        Syntax = {
            Tokenizer = "xcode.lang.c.lexer";
            Start = "=";
            End = ";";
            Recursive = NO;
            IncludeRules = (
                "xcode.lang.c.block",
                "xcode.lang.c.parenexpr",
                "xcode.lang.c.bracketexpr",
            );
        };
    },
)

