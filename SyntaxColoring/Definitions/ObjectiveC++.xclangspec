// Objective C++
(

/****************************************************************************/
// MARK: Objective-C++ keywords
/****************************************************************************/

    {
        Identifier = "xcode.lang.objcpp.identifier";
        BasedOn = "xcode.lang.objc.identifier";
        Syntax = {
            StartChars = "@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            CheckPreprocessorKnownMacros = YES;
            IncludeRules = (
                "xcode.lang.malterlib.variable.explicit",
                "xcode.lang.malterlib.keyword.builtinconstant",
                "xcode.lang.malterlib.constant.std",
                "xcode.lang.malterlib.constant",
                "xcode.lang.malterlib.constant.private",
                "xcode.lang.malterlib.namespace",
                "xcode.lang.malterlib.namespace.explicit",
                "xcode.lang.malterlib.templatetypeparam",
                "xcode.lang.malterlib.functiontemplatetypeparam",
                "xcode.lang.malterlib.constant.template",
                "xcode.lang.malterlib.constant.templatefunction",
                "xcode.lang.malterlib.type",
                "xcode.lang.malterlib.type.explicit",
                "xcode.lang.malterlib.functor.param",
                "xcode.lang.malterlib.functor.param.output",
                "xcode.lang.malterlib.functor.member",
                "xcode.lang.malterlib.functor.member.private",
                "xcode.lang.malterlib.member",
                "xcode.lang.malterlib.member.private",
                "xcode.lang.malterlib.function",
                "xcode.lang.malterlib.function.explicit",
                "xcode.lang.malterlib.function.private",
                "xcode.lang.malterlib.function.global",
                "xcode.lang.malterlib.function.global.explicit",
                "xcode.lang.malterlib.macro",
                "xcode.lang.malterlib.macro.explicit",
                "xcode.lang.malterlib.macro.parameter",
                "xcode.lang.malterlib.function.parameter",
                "xcode.lang.malterlib.function.parameter.output",
                "xcode.lang.malterlib.member.static",
                "xcode.lang.malterlib.member.static.private",
                "xcode.lang.malterlib.global",
                "xcode.lang.malterlib.functor.local",
                "xcode.lang.malterlib.keyword.qualifiers",
                "xcode.lang.malterlib.keyword.storageclass",
                "xcode.lang.malterlib.keyword.builtintype",
                "xcode.lang.malterlib.keyword.builtincharactertype",
                "xcode.lang.malterlib.keyword.builtinintegertype",
                "xcode.lang.malterlib.keyword.builtintypemodifier",
                "xcode.lang.malterlib.keyword.builtinvectortype",
                "xcode.lang.malterlib.keyword.builtinfloattype",
                "xcode.lang.malterlib.keyword.exceptionhandling",
                "xcode.lang.malterlib.keyword.introspection",
                "xcode.lang.malterlib.keyword.staticassert",
                "xcode.lang.malterlib.keyword.controlstatement",
                "xcode.lang.malterlib.keyword.optimization",
                "xcode.lang.malterlib.keyword.propertymodifier",
                "xcode.lang.malterlib.keyword.newdelete",
                "xcode.lang.malterlib.keyword.clr",
                "xcode.lang.malterlib.keyword.other",
                "xcode.lang.malterlib.keyword.typespecification",
                "xcode.lang.malterlib.keyword.namespace",
                "xcode.lang.malterlib.keyword.typename",
                "xcode.lang.malterlib.keyword.template",
                "xcode.lang.malterlib.keyword.typedef",
                "xcode.lang.malterlib.keyword.using",
                "xcode.lang.malterlib.keyword.auto",
                "xcode.lang.malterlib.keyword.js.var",
                "xcode.lang.malterlib.keyword.this",
                "xcode.lang.malterlib.keyword.operator",
                "xcode.lang.malterlib.keyword.access",
                "xcode.lang.malterlib.keyword.virtual",
                "xcode.lang.malterlib.keyword.casts",
                "xcode.lang.malterlib.keyword.ignore",
                "xcode.lang.malterlib.keyword.preprocessordirective",
                "xcode.lang.malterlib.variable",
            );
            Words = (
                // Keywords from C
                "__alignof__",
                "__asm__",
                "__attribute__",
                "__complex__",
                "__extension__",
                "__imag__",
                "__label__",
                "__nonnull",
                "__nullable",
                "__null_unspecified",
                "__real__",
                "__restrict",
                "__restrict__",
                "__typeof__",
                "_Bool",
                "_Complex",
                "_Imaginary",
                "_Nonnull",
                "_Nullable",
                "_Null_unspecified",
                "__block",
                "asm",
                "auto",
                "bool",
                "break",
                "case",
                "char",
                "const",
                "continue",
                "default",
                "do",
                "double",
                "else",
                "enum",
                "extern",
                "false",
                "float",
                "for",
                "goto",
                "if",
                "inline",
                "int",
                "long",
                "register",
                "restrict",
                "return",
                "short",
                "signed",
                "sizeof",
                "static",
                "struct",
                "switch",
                "true",
                "typedef",
                "typeof",
                "union",
                "unsigned",
                "void",
                "volatile",
                "while",
                "FALSE",
                "NULL",
                "TRUE",

                // keywords from Objective-C
                "_cmd",
                "__autoreleasing",
                "__bridge",
                "__bridge_transfer",
                "__bridge_retained",
                "__kindof",
                "__covariant",
                "__strong",
                "__unsafe_unretained",
                "__weak",
                "@autoreleasepool",
                "@available",
                "@catch",
                "@class",
                "@compatibility_alias",
                "@defs",
                "@dynamic",
                "@encode",
                "@end",
                "@finally",
                "@implementation",
                "@import",
                "@interface",
                "@optional",
                "@package",
                "@private",
                "@property",
                "@protected",
                "@protocol",
                "@public",
                "@required",
                "@selector",
                "@synchronized",
                "@synthesize",
                "@throw",
                "@try",
                "bycopy",
                "byref",
                "in",
                "inout",
                "oneway",
                "out",
                "BOOL",
                "IBAction",
                "IBInspectable",
                "IBOutlet",
                "IBOutletCollection",
                "IBSegueAction",
                "IB_DESIGNABLE",
                "IMP",
                "nonnull",
                "nullable",
                "null_unspecified",
                "NO",
                "NS_DURING",
                "NS_ENDHANDLER",
                "NS_HANDLER",
                "NS_VALUERETURN",
                "NS_VOIDRETURN",
                "Nil",
                "SEL",
                "YES",
                "id",
                "nil",
                "self",
                "super",
                "instancetype",

                // Keywords from C++
                "__private_extern__",
                "and",
                "and_eq",
                "bitand",
                "bitor",
                "catch",
                "class",
                "compl",
                "const_cast",
                "delete",
                "dynamic_cast",
                "explicit",
                "export",
                "final",
                "friend",
                "mutable",
                "namespace",
                "new",
                "not",
                "not_eq",
                "operator",
                "or",
                "or_eq",
                "private",
                "protected",
                "public",
                "reinterpret_cast",
                "static_cast",
                "template",
                "this",
                "throw",
                "try",
                "typeid",
                "typename",
                "typeid",
                "using",
                "virtual",
                "wchar_t",
                "xor",
                "xor_eq",

                // Keywords from C++0x
                "alignof",
                "char16_t",
                "char32_t",
                "constexpr",
                "decltype",
                "noexcept",
                "nullptr",
                "override",
                "static_assert",
                "thread_local",

                // Keywords from Clang C++ extensions
                "__has_nothrow_assign",
                "__has_nothrow_copy",
                "__has_nothrow_constructor",
                "__has_trivial_assign",
                "__has_trivial_copy",
                "__has_trivial_constructor",
                "__has_trivial_destructor",
                "__has_virtual_destructor",
                "__is_abstract",
                "__is_base_of",
                "__is_class",
                "__is_convertible_to",
                "__is_empty",
                "__is_enum",
                "__is_literal",
                "__is_literal_type",
                "__is_pod",
                "__is_polymorphic",
                "__is_trivial",
                "__is_union",
                "__is_trivially_copyable",
                "__underlying_type",
             );
            Type = "xcode.syntax.plain";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers
        };
    },

    {
        Identifier = "xcode.lang.objcpp.enumMacros";
        Syntax = {
            Words = (
                "NS_ENUM",
                "NS_OPTIONS",
                "CF_ENUM",
                "CF_OPTIONS",
            );
            Type = "xcode.syntax.identifier";
            WordBreak = NO;
        };
    },

    {
        Identifier = "xcode.lang.objcpp.interestingOperators";
        Syntax = {
            Words = (
                "...",
                "->",
                "::",
                ".",
             );
            Type = "xcode.syntax.plain";
        };
    },
/****************************************************************************/
// MARK: - Objective-C++ Top-Level
/****************************************************************************/

    {
        Identifier = "xcode.lang.objcpp";
        Description = "Objective-C++ Coloring";
        IncludeInMenu = YES;
        BasedOn = "xcode.lang.objc";    // for text macros
        UsesCLikeIndentation = YES;
        Name = "Objective-C++";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            IncludeRules = (
                "xcode.lang.objcpp.interface",
                "xcode.lang.objcpp.implementation",
                "xcode.lang.objcpp.protocol",
                "xcode.lang.objcpp.protocol.reference",
                "xcode.lang.objcpp.cpp.class",
                "xcode.lang.objcpp.cpp.method.definition",
                "xcode.lang.objcpp.function.declaration",
                "xcode.lang.objcpp.function.definition",
                "xcode.lang.objcpp.property.declaration",
                "xcode.lang.objcpp.typedef",
                "xcode.lang.objcpp.cpp.templatedefinition",
                "xcode.lang.objcpp.enumblock",
                "xcode.lang.objcpp.nsenumblock",
                "xcode.lang.objcpp.structblock",
                "xcode.lang.objcpp.unionblock",
                "xcode.lang.objcpp.namespace",
                "xcode.lang.objcpp.externblock",
                "xcode.lang.objcpp.block.toplevel",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.array.literal",
                "xcode.lang.objcpp.dictionary.literal",
                "xcode.lang.objcpp.expression.literal",
                "xcode.lang.objcpp.initializer",
                "xcode.lang.objcpp.import",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.objcpp.import";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "@import",
                "xcode.lang.objcpp.identifier",
            );
            Type = "xcode.syntax.objc.import";
        };
    },

/****************************************************************************/
// MARK: - Lexers
/****************************************************************************/

    // The following rule returns tokens to the other rules
    {
        Identifier = "xcode.lang.objcpp.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.objc.string",
                "xcode.lang.objc.string.wide",
                "xcode.lang.objc.string.utf8",
                "xcode.lang.objc.string.ucs2",
                "xcode.lang.objc.string.ucs4",
                "xcode.lang.objcpp.string.raw",
                "xcode.lang.string",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.cpp.string.raw",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objcpp.enumMacros",
                "xcode.lang.objc.number",
                "xcode.lang.objcpp.array.literal.start",
                "xcode.lang.objcpp.dictionary.literal.start",
                "xcode.lang.objcpp.expression.literal.start",
                "xcode.lang.objcpp.identifier",
                "xcode.lang.c.number",
                "xcode.lang.objcpp.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.lexer.toplevel";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.objc.string",
                "xcode.lang.objc.string.wide",
                "xcode.lang.objc.string.utf8",
                "xcode.lang.objc.string.ucs2",
                "xcode.lang.objc.string.ucs4",
                "xcode.lang.objcpp.string.raw",
                "xcode.lang.string",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.cpp.string.raw",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objcpp.interface.declarator",
                "xcode.lang.objcpp.implementation.declarator",
                "xcode.lang.objcpp.protocol.declarator",
                "xcode.lang.objcpp.property.declarator",
                "xcode.lang.objcpp.operatorclause",
                "xcode.lang.objcpp.enumMacros",
                "xcode.lang.objc.number",
                "xcode.lang.objcpp.array.literal.start",
                "xcode.lang.objcpp.dictionary.literal.start",
                "xcode.lang.objcpp.expression.literal.start",
                "xcode.lang.objcpp.identifier",
                "xcode.lang.c.number",
                "xcode.lang.objcpp.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.literal.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.objc.string",
                "xcode.lang.objc.string.wide",
                "xcode.lang.objc.string.utf8",
                "xcode.lang.objc.string.ucs2",
                "xcode.lang.objc.string.ucs4",
                "xcode.lang.objcpp.string.raw",
                "xcode.lang.string",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.cpp.string.raw",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objcpp.enumMacros",
                "xcode.lang.objc.number",
                "xcode.lang.objcpp.array.literal.start",
                "xcode.lang.objcpp.array.literal.end",
                "xcode.lang.objcpp.dictionary.literal.start",
                "xcode.lang.objcpp.dictionary.literal.end",
                "xcode.lang.objcpp.expression.literal.start",
                "xcode.lang.objcpp.expression.literal.end",
                "xcode.lang.objcpp.identifier",
                "xcode.lang.c.number",
                "xcode.lang.objcpp.interestingOperators",
            );
        };
    },

    {
        // not good enough, but the native lexer does it right
        Identifier = "xcode.lang.objcpp.string.raw";
        Syntax = {
            Start = "@R\"(";
            End = ")\"";
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.lexer.operator";
        Syntax = {
            IncludeRules = (
                "xcode.lang.objcpp.identifier",
                "xcode.lang.objcpp.anoperator",
            );
        };
    },

/****************************************************************************/
// MARK: - Interfaces/Implementations
/****************************************************************************/

    {
        Identifier = "xcode.lang.objcpp.implementation.declarator";
        BasedOn = "xcode.lang.objc.implementation.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "@implementation",
                "xcode.lang.objcpp.classnameclause",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.interface.declarator";
        BasedOn = "xcode.lang.objc.interface.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "@interface",
                "xcode.lang.objcpp.classnameclause",
                ":?",
                "xcode.lang.objcpp.classname?",
                "xcode.lang.objcpp.protocolclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.protocol.declarator";
        BasedOn = "xcode.lang.objc.protocol.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "@protocol",
                "xcode.lang.objcpp.protocolname",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.classname";
        BasedOn = "xcode.lang.objc.classname";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.identifier",
            );
            Type = "xcode.syntax.declaration.type";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.classnameclause";
        BasedOn = "xcode.lang.objc.classnameclause";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.classname",
                "xcode.lang.objcpp.cpp.templateclause?",
                "xcode.lang.objcpp.categoryclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.protocolname";
        BasedOn = "xcode.lang.objc.protocolname";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.identifier",
            );
            Type = "xcode.syntax.declaration.type";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.protocol.openangle";
        BasedOn = "xcode.lang.objc.protocol.openangle";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "<",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.protocol.closeangle";
        BasedOn = "xcode.lang.objc.protocol.closeangle";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                ">",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.protocolclause";
        BasedOn = "xcode.lang.objc.protocolclause";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.protocol.openangle",
                "xcode.lang.objcpp.protocolname",
                "xcode.lang.objcpp.protocol.protocollist*",
                "xcode.lang.objcpp.protocol.closeangle",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.categoryname";
        BasedOn = "xcode.lang.objc.categoryname";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.category.openparen";
        BasedOn = "xcode.lang.objc.category.openparen";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "(",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.category.closeparen";
        BasedOn = "xcode.lang.objc.category.closeparen";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                ")",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.categoryclause";
        BasedOn = "xcode.lang.objc.categoryclause";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.category.openparen",
                "xcode.lang.objcpp.categoryname?",
                "xcode.lang.objcpp.category.closeparen"
            );
        };
    },
    
    {
        Identifier = "xcode.lang.objcpp.protocol";
        BasedOn = "xcode.lang.objc.protocol";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Start = "xcode.lang.objcpp.protocol.declarator";
            End = "@end";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.objcpp.function.declaration",
                "xcode.lang.objcpp.method.declaration",
                "xcode.lang.objcpp.classmethod.declaration",
                "xcode.lang.objcpp.property.declaration",
                "xcode.lang.objcpp.typedef",
                "xcode.lang.objcpp.block",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
            );
            Type = "xcode.syntax.declaration.protocol";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.protocol.reference";
        BasedOn = "xcode.lang.objc.protocol.reference";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "xcode.lang.objcpp.protocol.declarator",
                "xcode.lang.objcpp.protocol.protocollist*",
                ";",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.protocol.protocollist";
        BasedOn = "xcode.lang.objc.protocol.protocollist";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                ",",
                "xcode.lang.objcpp.protocolname",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.interface";
        BasedOn = "xcode.lang.objc.interface";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Start = "xcode.lang.objcpp.interface.declarator";
            End = "@end";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.objcpp.function.declaration",
                "xcode.lang.objcpp.method.declaration",
                "xcode.lang.objcpp.classmethod.declaration",
                "xcode.lang.objcpp.property.declaration",
                "xcode.lang.objcpp.typedef",
                "xcode.lang.objcpp.block",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
            );
            Type = "xcode.syntax.declaration.objc.interface";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.implementation";
        BasedOn = "xcode.lang.objc.implementation";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Start = "xcode.lang.objcpp.implementation.declarator";
            End = "@end";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.objcpp.function.declaration",
                "xcode.lang.objcpp.function.definition",
                "xcode.lang.objcpp.method.definition",
                "xcode.lang.objcpp.classmethod.definition",
                "xcode.lang.objcpp.property.implementation.synthesize",
                "xcode.lang.objcpp.property.implementation.dynamic",
                "xcode.lang.objcpp.typedef",
                "xcode.lang.objcpp.block",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.initializer",
            );
            Type = "xcode.syntax.definition.objc.implementation";
        };
    },

/****************************************************************************/
// MARK: - Attributes or preprocessor macros we want to ignore
/****************************************************************************/

    {
        Identifier = "xcode.lang.objcpp.expression.attribute";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "__attribute__|xcode.lang.generated.preprocessor.function.ignore",
                "xcode.lang.objcpp.parenexpr",
            );
        };
    },

/****************************************************************************/
// MARK: - Functions/Methods
/****************************************************************************/

    {
        Identifier = "xcode.lang.objcpp.method.minus";
        BasedOn = "xcode.lang.objc.method.minus";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = ( "-", );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.method.plus";
        BasedOn = "xcode.lang.objc.method.plus";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = ( "+", );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.method.colon";
        BasedOn = "xcode.lang.objc.method.colon";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = ( ":", );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.partialname";
        BasedOn = "xcode.lang.objc.partialname";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = ( "xcode.lang.objcpp.identifier", );
            Type = "xcode.syntax.plain";
        };
    },


    {
        Identifier = "xcode.lang.objcpp.cpp.function.name.qualified";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "xcode.lang.objcpp.identifier",
                "::",                               // need at least one qualifier or this rule shouldn't match at all
                "xcode.lang.objcpp.function.name.tilde?",
                "xcode.lang.objcpp.operatorclause|xcode.lang.objcpp.identifier",
                "xcode.lang.objcpp.cpp.function.name.qualified.more*",
            );
            Type = "xcode.syntax.plain";
        };
    },
    
    {
        Identifier = "xcode.lang.objcpp.cpp.function.name.qualified.more";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "::",
                "xcode.lang.objcpp.function.name",
            );
        };
    },

    {
        Identifier = "xcode.lang.objcpp.function.definition";
        BasedOn = "xcode.lang.objc.function.definition";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "xcode.lang.objcpp.function.declarator",
                "const?",
                "override?",
                "final?",
                "override?",
                "xcode.lang.objcpp.cpp.noexceptclause?",
                "xcode.lang.objcpp.cpp.throwclause?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.cpp.returnclause?",
                "xcode.lang.objcpp.cpp.block.function",
            );
            Type = "xcode.syntax.definition.function";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.function.declaration";
        BasedOn = "xcode.lang.objc.function.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "xcode.lang.objcpp.function.declarator",
                "const?",
                "override?",
                "final?",
                "override?",
                "xcode.lang.objcpp.cpp.noexceptclause?",
                "xcode.lang.objcpp.cpp.throwclause?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.cpp.returnclause?",
                ";"
            );
            Type = "xcode.syntax.declaration.function";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.function.declarator";
        BasedOn = "xcode.lang.objc.function.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "xcode.lang.objcpp.function.name",
                "xcode.lang.objcpp.cpp.templateclause?",
                "xcode.lang.objcpp.function.declarator.parameters",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.function.declarator.parameters";
        BasedOn = "xcode.lang.objc.function.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "xcode.lang.objcpp.cpp.function.parameter.start",
                "xcode.lang.objcpp.cpp.function.parameter.more*",
                ")",
            );
        };
    },

    {
        Identifier = "xcode.lang.objcpp.function.name";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "xcode.lang.objcpp.function.name.tilde?",
                "xcode.lang.objcpp.identifier|xcode.lang.objcpp.operatorclause",
            );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.function.name.tilde";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "~",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.operatorclause";
        BasedOn = "xcode.lang.objc.operatorclause";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.operator";
            Rules = (
                "operator",
                "xcode.lang.objcpp.anoperator",
            );
        };
    },

    {
        Identifier = "xcode.lang.objcpp.anoperator";
        Syntax = {
            Match = (
                "^[ \t]*(new|delete|->\\*|->|,|\\+\\+|--|\\|\\||&&|>>=|<<=|>>|<<|>=|<=|==|!=|\\|=|&=|\\^=|%=|/=|\\*=|-=|\\+=|>|<|\\+|-|\\*|/|%|\\^|&|\\||~|!|=|\\[\\]|\\(\\))[ \t]*",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.cpp.function.parameter.start";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Start = "(";
            Until = ")";
            AltUntil = ",";
            IncludeRules = (
                //"xcode.lang.objcpp.cpp.function.parameter.function",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.cpp.templateclause",
            );
            Type = "xcode.syntax.name.parameter";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.cpp.function.parameter.more";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Start = ",";
            Until = ")|,";
            IncludeRules = (
                //"xcode.lang.objcpp.cpp.function.parameter.function",
                "xcode.lang.objcpp.array.literal",
                "xcode.lang.objcpp.dictionary.literal",
                "xcode.lang.objcpp.expression.literal",
                "xcode.lang.objcpp.block",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.cpp.templateclause",
            );
            Type = "xcode.syntax.name.parameter";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.cpp.function.parameter.function";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "(",
                "*",
                "xcode.lang.objcpp.cpp.identifier",
                ")",
            );
            Type = "xcode.syntax.name.parameter.function";
        };
    },

    {
        Identifier = "xcode.lang.objcpp.method.declaration";
        BasedOn = "xcode.lang.objc.method.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.method.declarator",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                ";",
            );
            Type = "xcode.syntax.declaration.method";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.method.definition";
        BasedOn = "xcode.lang.objc.method.definition";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.method.declarator",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                ";?",
                "xcode.lang.objcpp.cpp.block.function",
            );
            Type = "xcode.syntax.definition.method";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.method.declarator";
        BasedOn = "xcode.lang.objc.method.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.method.minus",
                "xcode.lang.objcpp.parenexpr?",
                "xcode.lang.objcpp.partialname",
                "xcode.lang.objcpp.method.declarator.args?",
            );
            Type = "xcode.syntax.method.declarator";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.classmethod.declaration";
        BasedOn = "xcode.lang.objc.classmethod.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.classmethod.declarator",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                ";",
            );
            Type = "xcode.syntax.declaration.method";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.classmethod.definition";
        BasedOn = "xcode.lang.objc.classmethod.definition";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.classmethod.declarator",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                ";?",
                "xcode.lang.objcpp.cpp.block.function",
            );
            Type = "xcode.syntax.definition.method";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.classmethod.declarator";
        BasedOn = "xcode.lang.objc.classmethod.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.method.plus",
                "xcode.lang.objcpp.parenexpr?",
                "xcode.lang.objcpp.partialname",
                "xcode.lang.objcpp.method.declarator.args?",
            );
            Type = "xcode.syntax.method.declarator";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.method.declarator.args";
        BasedOn = "xcode.lang.objc.method.declarator.args";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.method.colon",
                "xcode.lang.objcpp.parenexpr?",
                "xcode.lang.objcpp.parameter.name.local",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.method.declarator.moreargs*",
                "xcode.lang.objcpp.method.declarator.varargs?",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.parameter.name.local";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.identifier"
            );
            Type = "xcode.syntax.name.parameter.local";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.method.declarator.moreargs";
        BasedOn = "xcode.lang.objc.method.declarator.moreargs";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.partialname?",
                "xcode.lang.objcpp.method.colon",
                "xcode.lang.objcpp.parenexpr?",
                "xcode.lang.objcpp.parameter.name.local",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.method.declarator.varargs";
        BasedOn = "xcode.lang.objc.method.declarator.varargs";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                ",",
                "...",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.enumblock";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.enum.declarator",
                "xcode.lang.objcpp.basetype?",
                "xcode.lang.objcpp.block",
            );
            Type = "xcode.syntax.declaration.enum";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.enum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "enum",
                "class|struct?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.cpp.type.name.qualified?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.nsenumblock";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.nsenum.declarator",
                "xcode.lang.objcpp.block",
            );
            Type = "xcode.syntax.declaration.enum";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.nsenum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "NS_ENUM|NS_OPTIONS|CF_ENUM|CF_OPTIONS",
                "(",
                "xcode.lang.objcpp.identifier",
                "xcode.lang.objcpp.enum.optionalname?",
                ")",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.enum.optionalname";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                ",",
                "xcode.lang.objcpp.cpp.type.name.qualified",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.structblock";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.struct.declarator",
                "final?",
                "xcode.lang.objcpp.basetype?",
                "xcode.lang.objcpp.cpp.block.class",
            );
            Type = "xcode.syntax.declaration.struct";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.struct.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "struct",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.cpp.type.name.qualified?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.unionblock";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.union.declarator",
                "xcode.lang.objcpp.typeblock",
            );
            Type = "xcode.syntax.declaration.union";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.union.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "union",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.cpp.type.name.qualified?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.typeidentifier";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.identifier|int|char|float|double|short|long|unsigned|signed",
            );
        };
    },

/****************************************************************************/
// MARK: - Properties
/****************************************************************************/

    {
        Identifier = "xcode.lang.objcpp.property.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.objc.string",
                "xcode.lang.objc.string.wide",
                "xcode.lang.objc.string.utf8",
                "xcode.lang.objc.string.ucs2",
                "xcode.lang.objc.string.ucs4",
                "xcode.lang.objcpp.string.raw",
                "xcode.lang.string",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.cpp.string.raw",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objcpp.property.end",
                "xcode.lang.objc.number",
                "xcode.lang.objcpp.identifier",
                "xcode.lang.c.number",
                "xcode.lang.objcpp.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.name.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.objc.string",
                "xcode.lang.objc.string.wide",
                "xcode.lang.objc.string.utf8",
                "xcode.lang.objc.string.ucs2",
                "xcode.lang.objc.string.ucs4",
                "xcode.lang.objcpp.string.raw",
                "xcode.lang.string",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.cpp.string.raw",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objcpp.property.name",
                "xcode.lang.objc.number",
                "xcode.lang.objcpp.identifier",
                "xcode.lang.c.number",
                "xcode.lang.objcpp.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.comma";
        BasedOn = "xcode.lang.objc.property.comma";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = ( ",", );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.declaration";
        BasedOn = "xcode.lang.objc.property.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.property.lexer";
            Start = "xcode.lang.objcpp.property.declarator";
            End = "xcode.lang.objcpp.property.end|;";
            Type = "xcode.syntax.declaration.property";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.declarator";
        BasedOn = "xcode.lang.objc.property.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "@property",
                "xcode.lang.objcpp.property.options?",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.end";
        BasedOn = "xcode.lang.objc.property.end";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.property.name.lexer";
            Rules = (
                "xcode.lang.objcpp.property.name",
                "xcode.lang.objcpp.property.morenames?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                ";",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.name";
        BasedOn = "xcode.lang.objc.property.name";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.property.name.actual",
                "xcode.lang.objcpp.property.name.ivarextra?",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.morenames";
        BasedOn = "xcode.lang.objc.property.morenames";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.property.namelist+",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.namelist";
        BasedOn = "xcode.lang.objc.property.namelist";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.property.name.lexer";
            Rules = (
                "xcode.lang.objcpp.property.comma",
                "xcode.lang.objcpp.property.name",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.name.actual";
        BasedOn = "xcode.lang.objc.property.name.actual";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.identifier",
            );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.name.ivarextra";
        BasedOn = "xcode.lang.objc.property.name.ivarextra";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Start = "=";
            End = "xcode.lang.objcpp.identifier";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.options";
        BasedOn = "xcode.lang.objc.property.options";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.property.options.lexer";
            Start = "(";
            End = ")|;";
            Recursive = YES;
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.options.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.objc.string",
                "xcode.lang.objc.string.wide",
                "xcode.lang.objc.string.utf8",
                "xcode.lang.objc.string.ucs2",
                "xcode.lang.objc.string.ucs4",
                "xcode.lang.objcpp.string.raw",
                "xcode.lang.string",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.cpp.string.raw",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objcpp.property.options.identifier",
                "xcode.lang.objc.number",
                "xcode.lang.objcpp.identifier",
                "xcode.lang.c.number",
                "xcode.lang.objcpp.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.options.identifier";
        BasedOn = "xcode.lang.objc.property.options.identifier";
        Syntax = {
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
                "atomic",
                "setter",
                "getter",
                "readonly",
                "readwrite",
                "assign",
                "retain",
                "copy",
                "nonatomic",
                "weak",
                "strong",
                "unsafe_unretained",
                "nonull",
                "nullable",
                "null_resettable",
                "null_unspecified",
             );
            Type = "xcode.syntax.keyword";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.implementation.synthesize";
        BasedOn = "xcode.lang.objc.property.implementation.synthesize";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.property.lexer";
            Start = "@synthesize";
            End = "xcode.lang.objcpp.property.end|;";
            Type = "xcode.syntax.declaration.property";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.property.implementation.dynamic";
        BasedOn = "xcode.lang.objc.property.implementation.dynamic";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.property.lexer";
            Start = "@dynamic";
            End = "xcode.lang.objcpp.property.end|;";
            Type = "xcode.syntax.declaration.property";
        };
    },


/****************************************************************************/
// MARK: - Typedefs
/****************************************************************************/

    {
        Identifier = "xcode.lang.objcpp.lexer.typedef";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.objc.string",
                "xcode.lang.objc.string.wide",
                "xcode.lang.objc.string.utf8",
                "xcode.lang.objc.string.ucs2",
                "xcode.lang.objc.string.ucs4",
                "xcode.lang.objcpp.string.raw",
                "xcode.lang.string",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.cpp.string.raw",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objcpp.typedef.end",
                "xcode.lang.objcpp.enumMacros",
                "xcode.lang.objc.number",
                "xcode.lang.objcpp.identifier",
                "xcode.lang.c.number",
                "xcode.lang.objcpp.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.lexer.typedef.name";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.objc.string",
                "xcode.lang.objc.string.wide",
                "xcode.lang.objc.string.utf8",
                "xcode.lang.objc.string.ucs2",
                "xcode.lang.objc.string.ucs4",
                "xcode.lang.objcpp.string.raw",
                "xcode.lang.string",
                "xcode.lang.string.wide",
                "xcode.lang.string.utf8",
                "xcode.lang.string.ucs2",
                "xcode.lang.string.ucs4",
                "xcode.lang.cpp.string.raw",
                "xcode.lang.character",
                "xcode.lang.character.wide",
                "xcode.lang.character.utf8",
                "xcode.lang.character.ucs2",
                "xcode.lang.character.ucs4",
                "xcode.lang.completionplaceholder",
                "xcode.lang.objcpp.typedef.name",
                "xcode.lang.objc.number",
                "xcode.lang.objcpp.identifier",
                "xcode.lang.c.number",
                "xcode.lang.objcpp.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.typedef";
        BasedOn = "xcode.lang.objc.typedef";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.typedef";
            Start = "typedef";
            End = "xcode.lang.objcpp.typedef.end|;";
            IncludeRules = (
                "xcode.lang.objcpp.enumblock",
                "xcode.lang.objcpp.nsenumblock",
                "xcode.lang.objcpp.structblock",
                "xcode.lang.objcpp.unionblock",
                "xcode.lang.objcpp.typedef.function",
                "xcode.lang.objcpp.block",
                "xcode.lang.objcpp.bracketexpr",
            );
            Type = "xcode.syntax.typedef";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.typedef.name";
        BasedOn = "xcode.lang.objc.typedef.name";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.typedef.end";
        BasedOn = "xcode.lang.objc.typedef.end";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.typedef.name";
            Rules = (
                "xcode.lang.objcpp.typedef.name",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                ";"
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.typedef.function";
        BasedOn = "xcode.lang.objc.typedef.function";
        Syntax = {
            Start = "(";
            End = ")";
            IncludeRules = (
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.block",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.typedef.function.star",
                "xcode.lang.objcpp.typedef.function.caret",
            );
            Tokenizer = "xcode.lang.objcpp.lexer.typedef.name";
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.typedef.function.star";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.typedef.name";
            Rules = (
                "*",
                "xcode.lang.objcpp.typedef.name",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.typedef.function.caret";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.typedef.name";
            Rules = (
                "^",
                "xcode.lang.objcpp.typedef.name",
            );
            Type = "xcode.syntax.name.tree";
        };
    },


/****************************************************************************/
// MARK: - Blocks
/****************************************************************************/

    {
        Identifier = "xcode.lang.objcpp.block";
        BasedOn = "xcode.lang.objc.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.array.literal",
                "xcode.lang.objcpp.dictionary.literal",
                "xcode.lang.objcpp.expression.literal",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.typeblock";
        BasedOn = "xcode.lang.objc.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.array.literal",
                "xcode.lang.objcpp.dictionary.literal",
                "xcode.lang.objcpp.expression.literal",
                "xcode.lang.objcpp.structblock",
                "xcode.lang.objcpp.unionblock",
            );
        };
    },

    {
        Identifier = "xcode.lang.objcpp.block.toplevel";
        BasedOn = "xcode.lang.objcpp.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objcpp.interface",
                "xcode.lang.objcpp.implementation",
                "xcode.lang.objcpp.cpp.class",
                "xcode.lang.objcpp.cpp.method.definition",
                "xcode.lang.objcpp.function.declaration",
                "xcode.lang.objcpp.function.definition",
                "xcode.lang.objcpp.property.declaration",
                "xcode.lang.objcpp.typedef",
                "xcode.lang.objcpp.cpp.templatedefinition",
                "xcode.lang.objcpp.enumblock",
                "xcode.lang.objcpp.nsenumblock",
                "xcode.lang.objcpp.structblock",
                "xcode.lang.objcpp.unionblock",
                "xcode.lang.objcpp.namespace",
                "xcode.lang.objcpp.externblock",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.array.literal",
                "xcode.lang.objcpp.dictionary.literal",
                "xcode.lang.objcpp.expression.literal",
                "xcode.lang.objcpp.initializer",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.objcpp.namespace";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "namespace",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.cpp.type.name.qualified?",
                "xcode.lang.completionplaceholder?",
                "xcode.lang.objcpp.block.toplevel",
            );
            Type = "xcode.syntax.topLevelBlock";
        };
    },

    {
        Identifier = "xcode.lang.objcpp.externblock";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "extern",
                "xcode.lang.string",
                "xcode.lang.objcpp.block.toplevel",
            );
            Type = "xcode.syntax.topLevelBlock";
        };
    },

    {
        Identifier = "xcode.lang.objcpp.cpp.block.function";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objcpp.cpp.class",
                "xcode.lang.objcpp.typedef",
                "xcode.lang.objcpp.enumblock",
                "xcode.lang.objcpp.nsenumblock",
                "xcode.lang.objcpp.structblock",
                "xcode.lang.objcpp.unionblock",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.array.literal",
                "xcode.lang.objcpp.dictionary.literal",
                "xcode.lang.objcpp.expression.literal",
            );
        };
    },

    {
        Identifier = "xcode.lang.objcpp.parenexpr";
        BasedOn = "xcode.lang.objc.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Start = "(";
            End = ")";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.block",
                "xcode.lang.objcpp.array.literal",
                "xcode.lang.objcpp.dictionary.literal",
                "xcode.lang.objcpp.expression.literal",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.bracketexpr";
        BasedOn = "xcode.lang.objc.bracketexpr";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Start = "[";
            End = "]";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.block",
                "xcode.lang.objcpp.array.literal",
                "xcode.lang.objcpp.dictionary.literal",
                "xcode.lang.objcpp.expression.literal",
            );
        };
    },

    {
        Identifier = "xcode.lang.objcpp.array.literal";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.literal.lexer";
            Start = "@[";
            End = "xcode.lang.objcpp.array.literal.end";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objcpp.dictionary.literal",
                "xcode.lang.objcpp.expression.literal",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.array.literal.start";
        Syntax = {
            Words = ("@[",);
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.array.literal.end";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = ("]",);
            Type = "xcode.syntax.number";
        };
    },
    
    {
        Identifier = "xcode.lang.objcpp.dictionary.literal";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.literal.lexer";
            Start = "@{";
            End = "xcode.lang.objcpp.dictionary.literal.end";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objcpp.array.literal",
                "xcode.lang.objcpp.expression.literal",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.dictionary.literal.start";
        Syntax = {
            Words = ("@{",);
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.dictionary.literal.end";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = ("}",);
            Type = "xcode.syntax.number";
        };
    },

    {
        Identifier = "xcode.lang.objcpp.expression.literal";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.literal.lexer";
            Start = "@(";
            End = "xcode.lang.objcpp.expression.literal.end";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objcpp.array.literal",
                "xcode.lang.objcpp.dictionary.literal",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.expression.literal.start";
        Syntax = {
            Words = ("@(",);
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.expression.literal.end";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (")",);
            Type = "xcode.syntax.number";
        };
    },

/****************************************************************************/
// MARK: - C++ Classes and Methods
/****************************************************************************/

    {
        Identifier = "xcode.lang.objcpp.cpp.class";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.cpp.class.declarator",
                "final?",
                "xcode.lang.objcpp.basetype?",
                "xcode.lang.objcpp.cpp.block.class",
            );
            Type = "xcode.syntax.definition.class";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.cpp.class.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "class",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.cpp.expression.attribute.function*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.cpp.type.name.qualified",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.objcpp.cpp.type.name.qualified";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "::?",
                "xcode.lang.objcpp.cpp.name.qualified.name",
                "xcode.lang.objcpp.cpp.name.qualified.more*",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.cpp.name.qualified.name";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "xcode.lang.objcpp.identifier",
            );
            Type = "xcode.syntax.declaration.type";
        };
    },
    {
        Identifier = "xcode.lang.objcpp.cpp.name.qualified.more";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "::",
                "xcode.lang.objcpp.cpp.name.qualified.name",
            );
        };
    },

    {
        Identifier = "xcode.lang.objcpp.basetype";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Start = ":";
            Until = "{|;";     // just as a backstop to avoid sucking up too much
            IncludeRules = (
                "xcode.lang.objcpp.cpp.templateclause",
                "xcode.lang.objcpp.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.objcpp.cpp.method.declaration.classscope";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "xcode.lang.objcpp.function.declarator",   // Looks like a function, but it's really a method.
                "const?",
                "override?",
                "final?",
                "override?",
                "xcode.lang.objcpp.cpp.noexceptclause?",
                "xcode.lang.objcpp.cpp.throwclause?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.cpp.returnclause?",
                ";",
            );
            Type = "xcode.syntax.declaration.method";
        };
    },
    
    {
        Identifier = "xcode.lang.objcpp.cpp.method.definition.classscope";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "xcode.lang.objcpp.function.declarator",   // Looks like a function, but it's really a method.
                "const?",
                "override?",
                "final?",
                "override?",
                "xcode.lang.objcpp.cpp.noexceptclause?",
                "xcode.lang.objcpp.cpp.throwclause?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.cpp.initializerclause?",
                "xcode.lang.objcpp.cpp.returnclause?",
                "xcode.lang.objcpp.cpp.block.function",
            );
            Type = "xcode.syntax.definition.method";
        };
    },
    
    {
        Identifier = "xcode.lang.objcpp.cpp.method.definition";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "xcode.lang.objcpp.cpp.method.declarator",
                "const?",
                "xcode.lang.objcpp.cpp.noexceptclause?",
                "xcode.lang.objcpp.cpp.throwclause?",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.expression.attribute*",
                "xcode.lang.generated.preprocessor.ignore*",
                "xcode.lang.objcpp.cpp.initializerclause?",
                "xcode.lang.objcpp.cpp.returnclause?",
                "xcode.lang.objcpp.cpp.block.function",
            );
            Type = "xcode.syntax.definition.method";
        };
    },
    
    {
        Identifier = "xcode.lang.objcpp.cpp.method.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Rules = (
                "xcode.lang.objcpp.cpp.function.name.qualified",
                "xcode.lang.objcpp.cpp.templateclause?",
                "xcode.lang.objcpp.function.declarator.parameters",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    
    {
        Identifier = "xcode.lang.objcpp.cpp.throwclause";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "throw",
                "xcode.lang.objcpp.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.cpp.noexceptclause";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "noexcept",
                "xcode.lang.objcpp.parenexpr?",
            );
        };
    },

    {
        Identifier = "xcode.lang.objcpp.cpp.templatedefinition";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Rules = (
                "template",
                "xcode.lang.objcpp.cpp.templateclause",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.objcpp.cpp.templateclause";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Start = "<";
            End = ">";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objcpp.block",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.objcpp.cpp.initializerclause";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Start = ":";
            Until = "{";
            IncludeRules = (
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.objcpp.cpp.returnclause";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer";
            Start = "->";
            Until = "{|;";
            IncludeRules = (
                "xcode.lang.objcpp.templateclause",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.objcpp.cpp.block.class";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.objcpp.cpp.method.declaration.classscope",
                "xcode.lang.objcpp.cpp.method.definition.classscope",
                "xcode.lang.objcpp.cpp.class",
                "xcode.lang.objcpp.typedef",
                "xcode.lang.objcpp.enumblock",
                "xcode.lang.objcpp.nsenumblock",
                "xcode.lang.objcpp.structblock",
                "xcode.lang.objcpp.unionblock",
                "xcode.lang.objcpp.bracketexpr",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.initializer",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.objcpp.initializer";
        BasedOn = "xcode.lang.objc.initializer";
        Syntax = {
            Tokenizer = "xcode.lang.objcpp.lexer.toplevel";
            Start = "=";
            End = ";";
            Until = ")|}|]|,";
            Recursive = NO;
            IncludeRules = (
                "xcode.lang.objcpp.block",
                "xcode.lang.objcpp.array.literal",
                "xcode.lang.objcpp.dictionary.literal",
                "xcode.lang.objcpp.expression.literal",
                "xcode.lang.objcpp.parenexpr",
                "xcode.lang.objcpp.bracketexpr",
            );
        };
    },

)

