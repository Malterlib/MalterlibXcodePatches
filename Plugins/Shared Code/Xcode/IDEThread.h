//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.442, BuildTime: 2023-12-27T19:00:48Z)
//
//    - LC_BUILD_VERSION:  Platform: macOS, MinOS: 13.0, SDK: 14.0, Tool: ld (1022.1)
//    - LC_SOURCE_VERSION: 22551.0.0.0.0
//
#ifndef IDEThread_h
#define IDEThread_h
#import <Foundation/Foundation.h>

#include "DVTInvalidation-Protocol.h"
#include "IDEDebugNavigableModel-Protocol.h"
#include "IDEDebugProcess.h"
#include "IDEDebugQueue.h"
#include "IDELaunchSession.h"
#include "IDERecordedThreadCollection.h"
#include "IDEThread.h"

@class DVTDispatchLock, DVTStackBacktrace, NSArray, NSCache, NSMutableArray, NSNumber, NSString, IDEDebugProcess;
@protocol IDEDataValue;

@interface IDEThread : NSObject<IDEDebugNavigableModel, DVTInvalidation> {
  /* instance variables */
  IDEThread *_leadingThread;
  BOOL _staleThreadDisplayName;
  long long _lastCompressionValue;
  long long _secondLastCompressionValue;
  NSCache *_compressedStackFramesCache;
  NSMutableArray *_delayedInvalidationChildren;
  DVTDispatchLock *_delayedInvalidationChildrenLock;
}

@property (nonatomic) unsigned long long recordedThreadDepth;
@property (readonly, copy) NSMutableArray *mutableStackFrames;
@property (retain, nonatomic) IDEDebugProcess *parentProcess;
@property (readonly, nonatomic) NSNumber *uniqueID;
@property (nonatomic) int state;
@property (copy, nonatomic) NSString *threadName;
@property (readonly, nonatomic) NSString *threadDisplayName;
@property (nonatomic) int stopReason;
@property (retain, nonatomic) IDEDebugQueue *queue;
@property (nonatomic) BOOL autoRefreshStackFramesWhenPaused;
@property (copy, nonatomic) NSArray *stackFrames;
@property (nonatomic) BOOL hasLatestStackFrames;
@property BOOL hasInitializedStackFrames;
@property BOOL hasSwiftAsyncFrames;
@property BOOL hasSymbols;
@property (retain, nonatomic) IDEThread *recordedThread;
@property (nonatomic) BOOL recorded;
@property (nonatomic) BOOL recordedForDisplayingStackFrames;
@property (copy) NSString *lastReasonStopped;
@property (nonatomic) BOOL userSuspended;
@property (retain, nonatomic) IDERecordedThreadCollection *recordedThreadCollection;
@property (retain, nonatomic) NSObject<DVTInvalidation, IDEDataValue> *exceptionDataValue;
@property (retain) NSString *runtimeIssueAnnotationMessage;
@property (copy, nonatomic) NSString *qualityOfServiceValue;
@property (nonatomic) long long breakpointStackSelectionBehavior;
@property (readonly, copy) NSString *associatedProcessUUID;
@property (readonly) IDELaunchSession *launchSession;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL valid;
@property (readonly) DVTStackBacktrace *invalidationBacktrace;
@property (retain) DVTStackBacktrace *creationBacktrace;

/* class methods */
+ (void)initialize;
+ (id)displayNameForThreadName:(id)name threadID:(id)id;
+ (id)keyPathsForValuesAffectingThreadDisplayName;
+ (unsigned long long)assertionBehaviorForKeyValueObservationsAtEndOfEvent;

/* instance methods */
- (id)initWithParentProcess:(id)process uniqueID:(id)id;
- (id)init;
- (BOOL)isEqual:(id)equal;
- (BOOL)_isStopped;
- (BOOL)_shouldSkipRecordedFrames;
- (id)compressedStackFramesIncludingRecorded:(long long)recorded;
- (void)_resetCurrentStackFrameIfNecessary:(id)necessary;
- (void)_resetQueueStackFramesAndRecordedStates:(BOOL)states;
- (void)willReuse:(BOOL)reuse;
- (void)setPrimitiveQueue:(id)queue;
- (id)leadingThread;
- (void)setLeadingThread:(id)thread depth:(unsigned long long)depth;
- (void)_invalidateStackFrames:(id)frames;
- (void)invalidateUnusedStackFramesAfterCallToSetStackFrames:(id)frames;
- (void)refreshStackFrames;
- (void)requestStackFrames:(unsigned long long)frames handleOnMainQueue:(BOOL)queue resultHandler:(id /* block */)handler;
- (id)compressedStackFrames:(long long)frames;
- (id)primitiveStackFrames;
- (void)_inferState;
- (void)_inferStateFromStackFrames:(id)frames;
- (void)primitiveInvalidate;
- (BOOL)isRecorded;
@end

#endif /* IDEThread_h */
