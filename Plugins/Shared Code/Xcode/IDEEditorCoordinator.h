//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.442, BuildTime: 2023-12-27T19:00:48Z)
//
//    - LC_BUILD_VERSION:  Platform: macOS, MinOS: 13.0, SDK: 14.0, Tool: ld (1022.1)
//    - LC_SOURCE_VERSION: 22551.0.0.0.0
//
#ifndef IDEEditorCoordinator_h
#define IDEEditorCoordinator_h
#import <Foundation/Foundation.h>

@interface IDEEditorCoordinator : NSObject
/* class methods */
+ (void)initialize;
+ (void)setAccessibilityActionIsInProgress:(BOOL)progress;
+ (double)doubleClickDelay;
+ (id)openingEditorPerformanceMetric;
+ (id)_navigationOverlayTargetsForWindowController:(id)controller;
+ (void)_doOpenIn_Ask_withWorkspaceTabController:(id)controller editorContext:(id)context documentURL:(id)url client:(unsigned long long)client usingBlock:(id /* block */)block;
+ (void)_doOpenIn_NextEditor_withWorkspaceTabController:(id)controller editorContext:(id)context documentURL:(id)url client:(unsigned long long)client usingBlock:(id /* block */)block;
+ (void)_doOpenIn_AdjacentEditor_withWorkspaceTabController:(id)controller editorContext:(id)context documentURL:(id)url client:(unsigned long long)client usingBlock:(id /* block */)block;
+ (void)_doOpenIn_NewEditor_withWorkspaceTabController:(id)controller client:(unsigned long long)client usingBlock:(id /* block */)block;
+ (void)_doOpenIn_NewWorkspaceWindow_withWorkspaceWindowController:(id)controller isTab:(BOOL)tab client:(unsigned long long)client usingBlock:(id /* block */)block;
+ (void)_doOpenIn_NewEditorAreaSplitAfter_editorAreaSplit:(id)split workspaceTabController:(id)controller client:(unsigned long long)client usingBlock:(id /* block */)block;
+ (void)_doOpenIn_SeparateEditor_withWorkspaceTabController:(id)controller documentURL:(id)url client:(unsigned long long)client usingBlock:(id /* block */)block;
+ (id)_editorContextForEditorDocument:(id)document workspaceTabController:(id)controller;
+ (void)_doOpenIn_SeparateTab_withWorkspaceTabController:(id)controller documentURL:(id)url client:(unsigned long long)client usingBlock:(id /* block */)block;
+ (void)_doOpenIn_NewWindow_withWorkspaceTabController:(id)controller documentURL:(id)url usingBlock:(id /* block */)block;
+ (void)_doOpenIn_SeparateWindow_withWorkspaceTabController:(id)controller documentURL:(id)url client:(unsigned long long)client usingBlock:(id /* block */)block;
+ (unsigned long long)_allowedTargetForTarget:(unsigned long long)target maximizedState:(long long)state;
+ (void)_doOpenWithWorkspaceTabController:(id)controller editorContext:(id)context target:(unsigned long long)target allowFallback:(BOOL)fallback documentURL:(id)url client:(unsigned long long)client usingBlock:(id /* block */)block;
+ (void)_shouldNavigateAwayFromEditorContext:(id)context block:(id /* block */)block;
+ (void)_doOpenDocumentURL:(id)url forWorkspaceTabController:(id)controller editorContext:(id)context target:(unsigned long long)target takeFocus:(unsigned long long)focus client:(unsigned long long)client navigationBlock:(id /* block */)block;
+ (id)_openRequestForEditorOpenSpecifier:(id)specifier workspaceTabController:(id)controller editorContext:(id)context eventBehavior:(unsigned long long)behavior takeFocus:(unsigned long long)focus completionBlock:(id /* block */)block;
+ (id)_openRequestForEditorOpenSpecifier:(id)specifier editorContext:(id)context eventBehavior:(unsigned long long)behavior takeFocus:(unsigned long long)focus;
+ (id)_openEditorOpenSpecifier:(id)specifier forWorkspaceTabController:(id)controller eventBehavior:(unsigned long long)behavior takeFocus:(unsigned long long)focus completionBlock:(id /* block */)block;
+ (BOOL)_shouldAlwaysOpenInRequestingEditorContext:(id)context;
+ (id)openEditorOpenSpecifier:(id)specifier forEditor:(id)editor eventType:(unsigned long long)type takeFocus:(unsigned long long)focus;
+ (id)_openEditorOpenSpecifier:(id)specifier forEditor:(id)editor eventType:(unsigned long long)type takeFocus:(unsigned long long)focus;
+ (id)_openEditorOpenSpecifier:(id)specifier forWorkspaceTabController:(id)controller eventType:(unsigned long long)type takeFocus:(unsigned long long)focus;
+ (id)_openEditorOpenSpecifier:(id)specifier forWorkspaceTabController:(id)controller target:(unsigned long long)target takeFocus:(unsigned long long)focus;
+ (id)openEditorOpenSpecifier:(id)specifier forWorkspaceTabController:(id)controller eventType:(unsigned long long)type;
+ (id)openEditorOpenSpecifier:(id)specifier forEditor:(id)editor event:(id)event;
+ (id)_openEditorOpenSpecifier:(id)specifier forWorkspaceTabController:(id)controller eventType:(unsigned long long)type completionBlock:(id /* block */)block;
+ (id)_openEditorOpenSpecifier:(id)specifier forEditor:(id)editor eventBehavior:(unsigned long long)behavior;
+ (void)_openEditorOpenSpecifierInNavigationHUD:(id)hud forWorkspaceTabController:(id)controller;
+ (id)openEditorOpenSpecifier:(id)specifier forEditor:(id)editor eventType:(unsigned long long)type;
+ (id)openEditorHistoryItem:(id)item forEditor:(id)editor takeFocus:(unsigned long long)focus;
+ (id)openEditorHistoryItem:(id)item forEditor:(id)editor eventType:(unsigned long long)type takeFocus:(unsigned long long)focus;
+ (id)_openRequestForEditorHistoryItem:(id)item editorContext:(id)context eventBehavior:(unsigned long long)behavior takeFocus:(unsigned long long)focus;
+ (id)openEditorHistoryItem:(id)item forEditor:(id)editor eventBehavior:(unsigned long long)behavior takeFocus:(unsigned long long)focus;
+ (void)_openEditorContext:(id)context workspaceTabController:(id)controller usingBlock:(id /* block */)block;
+ (void)_openNavigationOverlayTargetSelection:(id)selection inEditorArea:(id)area defaultNavigationOptions:(unsigned long long)options usingBlock:(id /* block */)block;
+ (unsigned long long)_eventBehaviorForEventType:(unsigned long long)type;
+ (unsigned long long)eventBehaviorForEventType:(unsigned long long)type event:(id)event;
+ (BOOL)useOptionShiftBehaviorForCurrentEvent;
+ (unsigned long long)_eventBehaviorForEventType:(unsigned long long)type event:(id)event;
+ (id)_defaultsKeyForEventBehavior:(unsigned long long)behavior;
+ (id)_symbolNameForEditorCoordinatorEventBehavior:(unsigned long long)behavior;
+ (id)_symbolNameForEditorCoordinatorTakeFocus:(unsigned long long)focus;
+ (id)_symbolNameForEditorCoordinatorEventType:(unsigned long long)type;
+ (id)_symbolNameForEditorCoordinatorTarget:(unsigned long long)target;
+ (id)_defaultsValueForTarget:(unsigned long long)target;
+ (BOOL)_getTarget:(unsigned long long *)target forDefaultsValue:(id)value;
+ (unsigned long long)_defaultNavigationStyle;
+ (void)_setDefaultNavigationStyle:(unsigned long long)style;
+ (void)_enumerateValidTargetsForEventBehavior:(unsigned long long)behavior block:(id /* block */)block;
+ (void)_setDefaultTarget:(unsigned long long)target forEventBehavior:(unsigned long long)behavior;
+ (unsigned long long)_defaultTargetForEventBehavior:(unsigned long long)behavior;
+ (BOOL)_shouldActivateNewTabsAndWindows;
+ (void)_setShouldActivateNewTabsAndWindows:(BOOL)windows;
+ (BOOL)_useTabsInsteadOfWindowsInFullscreen;
+ (void)_setUseTabsInsteadOfWindowsInFullscreen:(BOOL)fullscreen;
+ (BOOL)_allowEditorOpeningAnimation;
+ (void)_setAllowEditorOpeningAnimation:(BOOL)animation;
+ (id)menuCommandTitleAdditionForEventBehavior:(unsigned long long)behavior fromPrimaryEditorContext:(BOOL)context isWindowFullscreen:(BOOL)fullscreen;
+ (void)_performBlockInsideReentrantGuard:(id /* block */)guard;
+ (id)_runningOpenRequest;
+ (id)_navigationDisabledReason;
+ (void)_disableNavigationWithReason:(id)reason duringBlock:(id /* block */)block;
@end

#endif /* IDEEditorCoordinator_h */
