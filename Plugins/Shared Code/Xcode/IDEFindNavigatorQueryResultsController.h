//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.442, BuildTime: 2023-12-27T19:00:48Z)
//
//    - LC_BUILD_VERSION:  Platform: macOS, MinOS: 13.0, SDK: 14.0, Tool: ld (1022.1)
//    - LC_SOURCE_VERSION: 22551.0.0.0.0
//
#ifndef IDEFindNavigatorQueryResultsController_h
#define IDEFindNavigatorQueryResultsController_h
#import <Foundation/Foundation.h>

#include "DVTInvalidation-Protocol.h"
#include "IDEBatchFindQueryDelegate-Protocol.h"
#include "IDEFindNavigatorFilteredResultSet.h"
#include "IDEFindNavigatorOutlineView.h"
#include "IDEFindNavigatorRelaxedQueryResultsExistChecker.h"
#include "IDEFindNavigatorRelaxedQueryResultsExistCheckerDelegate-Protocol.h"
#include "IDEWorkspaceDocument.h"

@protocol IDEFindNavigatorOutlineViewDelegate, IDEFindNavigatorQueryResultsControllerDelegate;
@class DVTDelayedInvocation, DVTFocusedRangeTextTruncator, DVTNotificationToken, DVTStackBacktrace, IDEBatchFindAbstractQuery, IDEBatchFindAbstractResult, IDEBatchFindLineWrappingParameters, IDEBatchFindQuerySpecification, NSArray, NSMapTable, NSSet, NSString;

@interface IDEFindNavigatorQueryResultsController : NSObject<NSOutlineViewDataSource, IDEFindNavigatorOutlineViewDelegate, IDEBatchFindQueryDelegate, IDEFindNavigatorRelaxedQueryResultsExistCheckerDelegate, DVTInvalidation> {
  /* instance variables */
  IDEBatchFindLineWrappingParameters *_lineWrappingParameters;
  IDEFindNavigatorFilteredResultSet *_resultSet;
  IDEBatchFindAbstractResult *_rootResult;
  long long _ignoreSelectionChangedCounter;
  long long _selectionChangedGeneration;
  DVTDelayedInvocation *_rowHeightValidator;
  IDEFindNavigatorRelaxedQueryResultsExistChecker *_anyResultsQuery;
  NSArray *_filterMatchStrings;
  NSString *_filterText;
  DVTNotificationToken *_maximumNumberOfLinesObservingToken;
  NSObject<DVTInvalidation> *_rowSizeStyleChangedObserver;
  NSObject<DVTInvalidation> *_displayNameObserver;
  IDEWorkspaceDocument *_workspaceDocument;
  NSSet *_selectedResults;
  NSMapTable *_searchResultDisplayRecords;
  NSString *_queryPlaceholderText;
  DVTFocusedRangeTextTruncator *_truncator;
}

@property (retain, nonatomic) IDEFindNavigatorOutlineView *outlineView;
@property (weak) NSObject<IDEFindNavigatorQueryResultsControllerDelegate> *delegate;
@property (readonly) long long matchCount;
@property (readonly) long long fileCount;
@property (readonly) long long progress;
@property (readonly) IDEBatchFindAbstractQuery *query;
@property (readonly) IDEBatchFindQuerySpecification *specification;
@property (readonly) NSString *placeholderText;
@property (readonly) NSString *resultsSummary;
@property (readonly) BOOL completed;
@property (readonly) NSString *retryWithRelaxedSpecificationActionTitle;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL valid;
@property (readonly) DVTStackBacktrace *invalidationBacktrace;
@property (retain) DVTStackBacktrace *creationBacktrace;

/* class methods */
+ (id)lineWrappingParametersForOutlineView:(id)view;
+ (void)initialize;
+ (id /* block */)emptyFilterForQuery:(id)query;

/* instance methods */
- (id)initWithQuerySpecification:(id)specification initialLineWrappingParameters:(id)parameters workspaceDocument:(id)document delegate:(id)delegate error:(id *)error;
- (void)initiate;
- (void)recusrivelyPushExpansionStateForChildrenOfItem:(id)item;
- (void)reloadAllFileRows;
- (void)pushExpansionStates;
- (id)regenerateLineWrappingParameters;
- (void)didCompleteFirstLayout;
- (void)primitiveInvalidate;
- (id)visibleResultsInOutlineOrder;
- (id)allVisibleResults;
- (id)selectedResults;
- (id)contextMenuFocusedResults;
- (id)editorDisplayPropertiesForResult:(id)result;
- (id)resultsSummaryWithPrefix:(id)prefix;
- (void)expandItemAndAncestors:(id)ancestors;
- (void)selectFindResult:(id)result openResultsInEditor:(BOOL)editor;
- (void)applyFilter:(id)filter isRestoringState:(BOOL)state;
- (void)deleteResults:(id)results;
- (void)outlineViewItemDidExpand:(id)expand;
- (void)outlineViewItemDidCollapse:(id)collapse;
- (void)outlineViewColumnDidResize:(id)resize;
- (void)exportSelectionAllowingImpliedOpenCommand:(BOOL)command;
- (void)ignoreSelectionChangesDuring:(id /* block */)during;
- (void)outlineViewSelectionDidChange:(id)change;
- (void)processSelectionChanges;
- (void)outlineView:(id)view batchSelectionDidChangeEventsDuring:(id /* block */)during;
- (id)outlineView:(id)view selectionIndexesForProposedSelection:(id)selection;
- (void)openClickedRowWithEventType:(unsigned long long)type;
- (void)outlineViewClicked:(id)clicked;
- (void)outlineViewDoubleClicked:(id)clicked;
- (long long)outlineView:(id)view numberOfChildrenOfItem:(id)item;
- (id)outlineView:(id)view child:(long long)child ofItem:(id)item;
- (BOOL)outlineView:(id)view isItemExpandable:(id)expandable;
- (id)outlineView:(id)view viewForTableColumn:(id)column item:(id)item;
- (double)outlineView:(id)view heightOfRowByItem:(id)item;
- (void)validateRowHeightsAnimated:(BOOL)animated;
- (void)validateRowHeights:(id)heights;
- (void)invokeWithReplaceableDocumentForLocation:(id)location block:(id /* block */)block;
- (BOOL)outlineView:(id)view doCommandBySelector:(SEL)selector;
- (id)targetedItemsForRow:(long long)row;
- (id)outlineView:(id)view pasteboardWriterForItem:(id)item;
- (id)replaceStateForFindResult:(id)result;
- (void)replaceMatchesFromResults:(id)results withText:(id)text;
- (void)findNavigatorOutlineViewEmptyContentPlaceholderButtonWasClicked:(id)clicked;
- (void)findNavigatorQuery:(id)query progressUpdate:(long long)update;
- (id)relaxedRetrySpecification;
- (void)findNavigatorQueryDidComplete:(id)complete totalWork:(struct { long long x0; long long x1; })work duration:(double)duration;
- (void)findNavigatorQuery:(id)query didFinishGeneratingLazyChildrenOfResult:(id)result;
- (void)findNavigatorQuery:(id)query isStalledOnFilePaths:(id)paths;
- (BOOL)shouldItemBeInitiallyExpandedWhileFiltered:(id)filtered;
- (void)findNavigatorQuery:(id)query didGenerateResults:(id)results;
- (void)relaxedQueryResultsExistChecker:(id)checker didUpdateResultCount:(long long)count;
- (void)relaxedQueryResultsExistCheckerDidFinish:(id)finish;
@end

#endif /* IDEFindNavigatorQueryResultsController_h */
