//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.442, BuildTime: 2023-12-27T19:00:48Z)
//
//    - LC_BUILD_VERSION:  Platform: macOS, MinOS: 13.0, SDK: 14.0, Tool: ld (1022.1)
//    - LC_SOURCE_VERSION: 22540.0.0.0.0
//
#ifndef DVTFilePath_h
#define DVTFilePath_h
#import <Foundation/Foundation.h>

#include "DVTFileDataType.h"
#include "DVTFilePath.h"
#include "DVTFileSystemRepresentationProviding-Protocol.h"
#include "DVTFileSystemVNode.h"

@class NSArray, NSDate, NSDictionary, NSNumber, NSString, NSURL;

@interface DVTFilePath : NSObject<NSCopying, DVTFileSystemRepresentationProviding, NSSecureCoding> {
  /* instance variables */
  DVTFilePath *_parentPath;
  struct fastsimplearray { unsigned long long x0; unsigned long long x1; void * * x2; } * _childfsaPaths;
  DVTFileSystemVNode *_vnode;
  DVTFileDataType *_presumedType;
  unsigned int _numAssociates;
  unsigned int _numObservers;
  id _associates;
  void * _childPathsLock;
  void * _associatesLock;
  unsigned short _fsrepLength;
  unsigned char _validationState;
  BOOL _hasResolvedVnode;
  BOOL _cleanRemoveFromParent;
  char _fsrep[0];
}

@property (readonly) DVTFilePath *parentFilePath;
@property (readonly) DVTFilePath *volumeFilePath;
@property (readonly) NSString *pathString;
@property (readonly) NSArray *pathComponents;
@property (readonly) NSURL *fileURL;
@property (readonly) NSString *fileName;
@property (readonly) NSString *pathExtension;
@property (readonly) BOOL existsInFileSystem;
@property (readonly) BOOL isReadable;
@property (readonly) BOOL isWritable;
@property (readonly) BOOL isDeletable;
@property (readonly) BOOL isExecutable;
@property (readonly) BOOL isSymbolicLink;
@property (readonly) BOOL isExcludedFromBackup;
@property (readonly) NSString *fileTypeAttribute;
@property (readonly) NSDate *modificationDate;
@property (readonly) NSArray *directoryContents;
@property (readonly) NSArray *sortedDirectoryContents;
@property (readonly) BOOL isDirectory;
@property (readonly) NSDictionary *fileAttributes;
@property (readonly) NSDictionary *fileSystemAttributes;
@property (readonly) NSURL *fileReferenceURL;
@property (readonly) DVTFilePath *symbolicLinkDestinationFilePath;
@property (readonly) DVTFileDataType *fileDataTypeFromFileContent;
@property (readonly) DVTFileDataType *fileDataTypePresumed;
@property (readonly) NSNumber *recursiveFileSize;

/* class methods */
+ (void)initialize;
+ (id)rootFilePath;
+ (id)_lookupOrCreateFilePathWithParentPath:(id)path fileSystemRepresentation:(const char *)representation length:(unsigned long long)length allowCreation:(BOOL)creation;
+ (BOOL)supportsSecureCoding;
+ (id)_filePathForParent:(id)parent fileSystemRepresentation:(const char *)representation length:(unsigned long long)length allowCreation:(BOOL)creation;
+ (id)_filePathForParent:(id)parent pathString:(id)string;
+ (id)filePathForFileSystemRepresentation:(const char *)representation length:(unsigned long long)length;
+ (id)filePathForFileSystemRepresentation:(const char *)representation;
+ (id)filePathForPathString:(id)string;
+ (id)filePathForFileURL:(id)url;
+ (void)registerCachedInfoDerivationFunction:(void *)function forKey:(id)key;
+ (void)_registerCachedInfoDerivationFunction:(void *)function forKey:(id)key shouldUsePerVnodeLock:(BOOL)lock;
+ (void *)_cachedInfoDerivationFunctionForKey:(id)key derivationLock:(id *)lock;
+ (void)_registerStandardCachedFileInfoDerivationFunctionsIfNeeded;

/* instance methods */
- (void)dealloc;
- (void)_invokeWithLockedChildPaths:(id /* block */)paths;
- (void)_invokeWithLockedAssociates:(id /* block */)associates;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (BOOL)isAncestorOfFilePath:(id)path;
- (id)firstAncestorPassingTest:(id /* block */)test;
- (id)filePathForRelativeFileSystemRepresentation:(const char *)representation length:(unsigned long long)length;
- (id)filePathForRelativeFileSystemRepresentation:(const char *)representation;
- (id)filePathForRelativePathString:(id)string;
- (id)filePathForUniqueRelativeFileWithPrefix:(id)prefix error:(id *)error;
- (id)filePathForUniqueRelativeDirectoryWithPrefix:(id)prefix error:(id *)error;
- (BOOL)getFullFileSystemRepresentationIntoBuffer:(char * *)buffer ofLength:(unsigned long long)length allowAllocation:(BOOL)allocation;
- (BOOL)_fileNameHasSuffix:(const char *)suffix suffixLength:(long long)length;
- (const char *)fileNameFSRepReturningLength:(long long *)length;
- (void)invokeWithAccessToHeapAllocatedFileSystemRepresentationAndLength:(id /* block */)length;
- (void)invokeWithAccessToFileSystemRepresentationAndLength:(id /* block */)length;
- (void)invokeWithAccessToFileSystemRepresentation:(id /* block */)representation;
- (id)relativePathStringFromAncestorFilePath:(id)path;
- (id)relativePathStringFromFilePath:(id)path;
- (BOOL)isEqual:(id)equal;
- (BOOL)isSameFileAsFilePath:(id)path;
- (void)_locked_tentativelyInvalidateChildrenRecursivelyWithChildrenShouldBeTentativelyInvalid:(BOOL)invalid;
- (void)_locked_validateTentativelyInvalidatedChildrenRecursively;
- (void)_invalidateChildrenRecursivelyKnownDoesNotExist:(BOOL)exist;
- (void)_invalidateKnownDoesNotExist:(BOOL)exist explicitlyInvalidateChildren:(BOOL)children;
- (void)invalidateFilePath;
- (void)_invalidateFilePathAndChildren;
- (void)_invalidateFilePathAndChildrenIncludingEquivalents;
- (id)_locked_vnodeKnownDoesNotExist:(BOOL)exist;
- (id)_locked_vnode;
- (BOOL)_hasResolvedVnode;
- (void)excludeFromBackup;
- (void)performCoordinatedReadRecursively:(BOOL)recursively;
- (id)directoryContentsWithError:(id *)error;
- (id)machOArchitecturesWithError:(id *)error;
- (id)recursiveFileSizeWithError:(id *)error;
- (id)cachedValueForKey:(id)key;
- (BOOL)_addInfoForObserversOfChangedFilePath:(id)path toObjects:(id)objects roles:(id)roles blocks:(id)blocks dispatchQueues:(id)queues operationQueues:(id)queues;
- (BOOL)_hasChangeObservers;
- (void)_notifyAssociatesOfChange;
- (void)_addAssociatesWithRole:(id)role toArray:(id *)array;
- (id)associatesWithRole:(id)role forAllPathsToSameFile:(BOOL)file;
- (id)associatesWithRole:(id)role;
- (void)addAssociate:(id)associate withRole:(id)role;
- (void)addAssociate:(id)associate withRole:(id)role observingDidChangeRecursively:(BOOL)recursively onDispatchQueue:(id)queue block:(id /* block */)block;
- (void)addAssociate:(id)associate withRole:(id)role observingDidChangeRecursively:(BOOL)recursively onOperationQueue:(id)queue block:(id /* block */)block;
- (void)removeAssociate:(id)associate withRole:(id)role;
- (void)removeAssociatesWithRole:(id)role;
- (void)removeAssociate:(id)associate;
- (void)removeAllAssociates;
- (void)simulateFileSystemNotificationAndNotifyAssociatesForUnitTests;
- (long long)comparePathString:(id)string;
- (void)dvt_provideFileSystemRepresentationToBlock:(id /* block */)block;
- (id)description;
- (id)_descriptionOfAssociates;
@end

#endif /* DVTFilePath_h */
