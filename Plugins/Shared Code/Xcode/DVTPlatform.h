//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.442, BuildTime: 2023-12-27T19:00:48Z)
//
//    - LC_BUILD_VERSION:  Platform: macOS, MinOS: 13.0, SDK: 14.0, Tool: ld (1022.1)
//    - LC_SOURCE_VERSION: 22540.0.0.0.0
//
#ifndef DVTPlatform_h
#define DVTPlatform_h
#import <Foundation/Foundation.h>

#include "DVTExtendedPlatformInfo.h"
#include "DVTFilePath.h"
#include "DVTPlatformFamily.h"
#include "DVTSDK.h"
#include "DVTVersion.h"

@class NSArray, NSDictionary, NSHashTable, NSSet, NSString, DVTFoundation_DVTKnownPlatform;

@interface DVTPlatform : NSObject<NSCopying> {
  /* instance variables */
  NSDictionary *_propertyListDictionary;
  NSDictionary *_internalPropertyListDictionary;
  DVTSDK *_lazyDefaultSDKForPlatformInstallation;
}

@property (readonly) DVTExtendedPlatformInfo *dvt_extendedInfo;
@property (nonatomic, readonly) NSArray *allSupportedArchitectures;
@property (nonatomic, readonly) DVTSDK *latestPublicOrInternalSDK;
@property (nonatomic, readonly) DVTSDK *latestInternalOrPublicSDK;
@property (nonatomic, readonly) DVTFoundation_DVTKnownPlatform *knownPlatform;
@property (retain) DVTPlatformFamily *family;
@property (readonly, copy) NSArray *alternateNames;
@property (readonly, copy) NSDictionary *deviceProperties;
@property (readonly, copy) NSString *platformDirectoryName;
@property (readonly, copy) NSString *identifier;
@property (readonly, copy) NSString *name;
@property (readonly) DVTVersion *minimumSDKVersion;
@property (readonly, copy) NSSet *SDKs;
@property (readonly) DVTSDK *defaultSDKForPlatformInstallation;
@property (readonly) DVTFilePath *platformPath;
@property (readonly) DVTFilePath *iconPath;
@property (readonly, copy) NSString *userDescription;
@property (readonly, copy) NSString *platformVersion;
@property (readonly) BOOL isDeploymentPlatform;
@property (readonly) BOOL isWatchPlatform;
@property (readonly) BOOL isWatchDevice;
@property (readonly) BOOL isiOSDevice;
@property (readonly, copy) NSString *sdkName;
@property (readonly, copy) NSString *internalSDKName;

/* class methods */
+ (void)initialize;
+ (void)_mapPlatformName:(id)name toPlatform:(id)platform isAlias:(BOOL)alias;
+ (id)platformForName:(id)name;
+ (id)platformForUserDescription:(id)description;
+ (void)_mapPlatformIdentifier:(id)identifier toPlatform:(id)platform;
+ (id)platformForIdentifier:(id)identifier;
+ (id)_allPlatformsByIdentifierValues;
+ (void)_mapPlatformPath:(id)path toPlatform:(id)platform;
+ (id)platformForPath:(id)path;
+ (void)registerPlatform:(id)platform;
+ (id)allPlatforms;
+ (id)_propertyDictionaryForPlatformAtPath:(id)path;
+ (void)_loadPlatformAtPath:(id)path;
+ (BOOL)loadAllPlatformsReturningError:(id *)error;
+ (BOOL)validatePlatformDataReturningError:(id *)error;
+ (id)defaultPlatform;
+ (BOOL)allowMissingDefaultPlatform;
+ (BOOL)onlySearchExtraPlatformFolders;
+ (id)onlyLoadPlatformIdentifiers;
+ (id)onlyLoadPlatformFamilyNames;
+ (id)extraPlatformFolders;

/* instance methods */
- (id)dvt_extendedInfoOrError:(id *)error;
- (id)initWithPropertyListDictionary:(id)dictionary path:(id)path;
- (id)initWithPath:(id)path;
- (id)propertyListDictionary;
- (id)internalPropertyListDictionary;
- (void)addSDK:(id)sdk;
- (id)mappedOperatingSystemVersionForPlatformFamily:(id)family version:(id)version;
- (id)mappedOperatingSystemVersionForPlatformFamilyName:(id)name version:(id)version;
- (id)mappedOperatingSystemVersionForPlatformFamilyName:(id)name version:(id)version reverse:(BOOL)reverse;
- (id)description;
- (BOOL)isEqual:(id)equal;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)zone;
@end

#endif /* DVTPlatform_h */
