//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.442, BuildTime: 2023-12-27T19:00:48Z)
//
//    - LC_BUILD_VERSION:  Platform: macOS, MinOS: 13.0, SDK: 14.0, Tool: ld (1022.1)
//    - LC_SOURCE_VERSION: 22551.0.0.0.0
//
#ifndef IDEXMLPackageContainer_h
#define IDEXMLPackageContainer_h
#import <Foundation/Foundation.h>

#include "IDEContainer.h"
#include "DVTXMLUnarchiverDelegate-Protocol.h"
#include "DVTXMLUnarchiving-Protocol.h"
#include "IDECustomDataStoring-Protocol.h"
#include "IDEDirectoryBasedCustomDataStore.h"
#include "IDEGroup.h"

@class DVTNotificationToken, NSMapTable, NSMutableDictionary, NSString;

@interface IDEXMLPackageContainer : IDEContainer<DVTXMLUnarchiverDelegate, DVTXMLUnarchiving, IDECustomDataStoring> {
  /* instance variables */
  IDEGroup *_unarchivingGroup;
  NSMutableDictionary *_unarchivingProperties;
  NSMapTable *_unsavedXMLDataForCustomDataStoreSpecifier;
  DVTNotificationToken *_dataStoreCloseObservation;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain) IDEDirectoryBasedCustomDataStore *customDataStore;
@property (readonly) BOOL hasUnhandledArchiveData;
@property (readonly) NSString *displayName;
@property (readonly) float archiveVersion;
@property (readonly) float maxSupportedArchiveVersion;

/* class methods */
+ (BOOL)supportsFilePersistence;
+ (id)rootElementName;
+ (id)xmlArchiveFileName;
+ (id)containerDataFilePathsForFilePath:(id)path;

/* instance methods */
- (void)dvt_setProperty:(id)property fromUTF8String:(const char *)string fromXMLUnarchiver:(id)xmlunarchiver;
- (void)dvt_addObject:(id)object fromXMLUnarchiver:(id)xmlunarchiver;
- (void)dvt_encodeAttributesWithXMLArchiver:(id)xmlarchiver version:(id)version;
- (void)dvt_encodeRelationshipsWithXMLArchiver:(id)xmlarchiver version:(id)version;
- (id)_archiveFilePathForFilePath:(id)path;
- (void)_createCustomDataStore:(id)store;
- (id)initWithFilePath:(id)path extension:(id)extension workspace:(id)workspace options:(id)options error:(id *)error;
- (void)customDataStoreClosing:(id)closing;
- (id)initFromXMLUnarchiver:(id)xmlunarchiver archiveVersion:(float)version;
- (BOOL)readFromFilePath:(id)path error:(id *)error;
- (BOOL)willReadFromFilePath:(id)path error:(id *)error;
- (id)_subitemsForUnarchivedSubitems:(id)subitems;
- (BOOL)didReadFromFilePath:(id)path error:(id *)error;
- (id)_xmlData;
- (BOOL)writeToFilePath:(id)path forceWrite:(BOOL)write error:(id *)error;
- (id)containerDataFilePathsForFilePath:(id)path;
- (void)_handleFilePathDidChange:(id)change;
- (void)scmStatusForSpecifier:(id)specifier completionBlock:(id /* block */)block;
- (void)addSpecifier:(id)specifier inWorkspace:(id)workspace toSCMWithCompletionBlock:(id /* block */)block;
- (void)primitiveInvalidate;
- (id)customDataSpecifiersForGrouping:(id)grouping ownership:(id)ownership;
- (id)customDataOwnershipsForGrouping:(id)grouping;
- (id)readCustomDataWithSpecifier:(id)specifier error:(id *)error;
- (void)writeCustomData:(id)data withSpecifier:(id)specifier forceOverwrite:(BOOL)overwrite completionQueue:(id)queue completionBlock:(id /* block */)block;
- (void)removeCustomDataWithSpecifier:(id)specifier completionQueue:(id)queue completionBlock:(id /* block */)block;
- (void)moveCustomDataWithSpecifier:(id)specifier toSpecifier:(id)specifier completionQueue:(id)queue completionBlock:(id /* block */)block;
- (BOOL)supportsCustomDataForOwnership:(id)ownership;
@end

#endif /* IDEXMLPackageContainer_h */
